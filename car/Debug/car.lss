
car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000072a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000072a  0000079e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000007a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00000f00  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d4  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003ca  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000597  00000000  00000000  00001c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00002238  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000243  00000000  00000000  0000238c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000252  00000000  00000000  000025cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 93 03 	jmp	0x726	; 0x726 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
uint8 state = frwrd ;
int main(void)
{
	//DIO_SetPinDirection(PIN29,OUTPUT);
	//DIO_SetPinDirection(PIN28,OUTPUT);
	DIO_SetPinDirection(PIN16,INPUT);
  92:	80 e1       	ldi	r24, 0x10	; 16
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN17,INPUT);
  9a:	81 e1       	ldi	r24, 0x11	; 17
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN18,INPUT);
  a2:	82 e1       	ldi	r24, 0x12	; 18
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN11,OUTPUT);
  aa:	8b e0       	ldi	r24, 0x0B	; 11
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPinDirection>
	//DIO_SetPinDirection(PIN12,INPUT);
	motor_init();
  b2:	0e 94 38 02 	call	0x470	; 0x470 <motor_init>
	pwm_init();
  b6:	0e 94 a6 02 	call	0x54c	; 0x54c <pwm_init>
	
	
    while(1)
    {
		pwm_write(255);
        if (DIO_ReadPin(PIN16) == 1 && DIO_ReadPin(PIN17) ==0 && DIO_ReadPin(PIN18) ==0) {state = frwrd;}
  ba:	c2 e0       	ldi	r28, 0x02	; 2
   else if (DIO_ReadPin(PIN16) ==0 &&DIO_ReadPin(PIN17) ==1 && DIO_ReadPin(PIN18) ==0) {state = slow;}	
  bc:	d1 e0       	ldi	r29, 0x01	; 1
	pwm_init();
	
	
    while(1)
    {
		pwm_write(255);
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 bc 02 	call	0x578	; 0x578 <pwm_write>
        if (DIO_ReadPin(PIN16) == 1 && DIO_ReadPin(PIN17) ==0 && DIO_ReadPin(PIN18) ==0) {state = frwrd;}
  c6:	80 e1       	ldi	r24, 0x10	; 16
  c8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_ReadPin>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <main+0x58>
  d0:	81 e1       	ldi	r24, 0x11	; 17
  d2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_ReadPin>
  d6:	88 23       	and	r24, r24
  d8:	41 f4       	brne	.+16     	; 0xea <main+0x58>
  da:	82 e1       	ldi	r24, 0x12	; 18
  dc:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_ReadPin>
  e0:	88 23       	and	r24, r24
  e2:	19 f4       	brne	.+6      	; 0xea <main+0x58>
  e4:	c0 93 60 00 	sts	0x0060, r28
  e8:	28 c0       	rjmp	.+80     	; 0x13a <main+0xa8>
   else if (DIO_ReadPin(PIN16) ==0 &&DIO_ReadPin(PIN17) ==1 && DIO_ReadPin(PIN18) ==0) {state = slow;}	
  ea:	80 e1       	ldi	r24, 0x10	; 16
  ec:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_ReadPin>
  f0:	88 23       	and	r24, r24
  f2:	69 f4       	brne	.+26     	; 0x10e <main+0x7c>
  f4:	81 e1       	ldi	r24, 0x11	; 17
  f6:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_ReadPin>
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	41 f4       	brne	.+16     	; 0x10e <main+0x7c>
  fe:	82 e1       	ldi	r24, 0x12	; 18
 100:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_ReadPin>
 104:	88 23       	and	r24, r24
 106:	19 f4       	brne	.+6      	; 0x10e <main+0x7c>
 108:	d0 93 60 00 	sts	0x0060, r29
 10c:	3f c0       	rjmp	.+126    	; 0x18c <main+0xfa>
   else if (DIO_ReadPin(PIN16) ==0 &&DIO_ReadPin(PIN17) ==0 && DIO_ReadPin(PIN18) ==1) {state = stop;}	
 10e:	80 e1       	ldi	r24, 0x10	; 16
 110:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_ReadPin>
 114:	88 23       	and	r24, r24
 116:	69 f4       	brne	.+26     	; 0x132 <main+0xa0>
 118:	81 e1       	ldi	r24, 0x11	; 17
 11a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_ReadPin>
 11e:	88 23       	and	r24, r24
 120:	41 f4       	brne	.+16     	; 0x132 <main+0xa0>
 122:	82 e1       	ldi	r24, 0x12	; 18
 124:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_ReadPin>
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	19 f4       	brne	.+6      	; 0x132 <main+0xa0>
 12c:	10 92 60 00 	sts	0x0060, r1
 130:	2d c0       	rjmp	.+90     	; 0x18c <main+0xfa>
	   
	   if (state==frwrd)
 132:	80 91 60 00 	lds	r24, 0x0060
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	39 f4       	brne	.+14     	; 0x148 <main+0xb6>
	   {
		pwm_write(255);
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 bc 02 	call	0x578	; 0x578 <pwm_write>
		motor_forward();
 142:	0e 94 51 02 	call	0x4a2	; 0x4a2 <motor_forward>
 146:	bb cf       	rjmp	.-138    	; 0xbe <main+0x2c>
	   }
	   else if (state == slow)
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	39 f4       	brne	.+14     	; 0x15a <main+0xc8>
	   {
	   pwm_write(100);
 14c:	84 e6       	ldi	r24, 0x64	; 100
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 bc 02 	call	0x578	; 0x578 <pwm_write>
		   motor_forward();
 154:	0e 94 51 02 	call	0x4a2	; 0x4a2 <motor_forward>
 158:	b2 cf       	rjmp	.-156    	; 0xbe <main+0x2c>
	   }
	   else if ( state == stop)
 15a:	88 23       	and	r24, r24
 15c:	09 f0       	breq	.+2      	; 0x160 <main+0xce>
 15e:	af cf       	rjmp	.-162    	; 0xbe <main+0x2c>
	   {
		   motor_stop();
 160:	0e 94 95 02 	call	0x52a	; 0x52a <motor_stop>
	   pwm_write(0);
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 bc 02 	call	0x578	; 0x578 <pwm_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	8f e9       	ldi	r24, 0x9F	; 159
 16e:	96 e8       	ldi	r25, 0x86	; 134
 170:	a1 e0       	ldi	r26, 0x01	; 1
 172:	81 50       	subi	r24, 0x01	; 1
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	a0 40       	sbci	r26, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0xe0>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0xea>
 17c:	00 00       	nop
		   _delay_ms(500);
		   pwm_write(127);
 17e:	8f e7       	ldi	r24, 0x7F	; 127
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 bc 02 	call	0x578	; 0x578 <pwm_write>
		   motor_right();
 186:	0e 94 73 02 	call	0x4e6	; 0x4e6 <motor_right>
 18a:	99 cf       	rjmp	.-206    	; 0xbe <main+0x2c>
		pwm_write(255);
        if (DIO_ReadPin(PIN16) == 1 && DIO_ReadPin(PIN17) ==0 && DIO_ReadPin(PIN18) ==0) {state = frwrd;}
   else if (DIO_ReadPin(PIN16) ==0 &&DIO_ReadPin(PIN17) ==1 && DIO_ReadPin(PIN18) ==0) {state = slow;}	
   else if (DIO_ReadPin(PIN16) ==0 &&DIO_ReadPin(PIN17) ==0 && DIO_ReadPin(PIN18) ==1) {state = stop;}	
	   
	   if (state==frwrd)
 18c:	80 91 60 00 	lds	r24, 0x0060
 190:	db cf       	rjmp	.-74     	; 0x148 <main+0xb6>

00000192 <DIO_WritePin>:

#include "DIO.h"

void DIO_WritePin (uint8 PinNum , uint8 PinValue)
{
	if((PinNum>=0)&&(PinNum<=7))
 192:	88 30       	cpi	r24, 0x08	; 8
 194:	e8 f4       	brcc	.+58     	; 0x1d0 <DIO_WritePin+0x3e>
	{
		if(PinValue==0)
 196:	66 23       	and	r22, r22
 198:	71 f4       	brne	.+28     	; 0x1b6 <DIO_WritePin+0x24>
		{
			clrbit(PORTA,PinNum);
 19a:	4b b3       	in	r20, 0x1b	; 27
 19c:	21 e0       	ldi	r18, 0x01	; 1
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	b9 01       	movw	r22, r18
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_WritePin+0x16>
 1a4:	66 0f       	add	r22, r22
 1a6:	77 1f       	adc	r23, r23
 1a8:	8a 95       	dec	r24
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_WritePin+0x12>
 1ac:	cb 01       	movw	r24, r22
 1ae:	80 95       	com	r24
 1b0:	84 23       	and	r24, r20
 1b2:	8b bb       	out	0x1b, r24	; 27
 1b4:	08 95       	ret
		}
		else
		{
			setbit(PORTA,PinNum);
 1b6:	4b b3       	in	r20, 0x1b	; 27
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	b9 01       	movw	r22, r18
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_WritePin+0x32>
 1c0:	66 0f       	add	r22, r22
 1c2:	77 1f       	adc	r23, r23
 1c4:	8a 95       	dec	r24
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_WritePin+0x2e>
 1c8:	cb 01       	movw	r24, r22
 1ca:	84 2b       	or	r24, r20
 1cc:	8b bb       	out	0x1b, r24	; 27
 1ce:	08 95       	ret
		}
	}
	else if((PinNum>=8)&&(PinNum<=15))
 1d0:	98 2f       	mov	r25, r24
 1d2:	98 50       	subi	r25, 0x08	; 8
 1d4:	98 30       	cpi	r25, 0x08	; 8
 1d6:	18 f5       	brcc	.+70     	; 0x21e <DIO_WritePin+0x8c>
	{
		if(PinValue==0)
 1d8:	66 23       	and	r22, r22
 1da:	89 f4       	brne	.+34     	; 0x1fe <DIO_WritePin+0x6c>
		{
			clrbit(PORTB,(PinNum-8));
 1dc:	68 b3       	in	r22, 0x18	; 24
 1de:	28 2f       	mov	r18, r24
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	28 50       	subi	r18, 0x08	; 8
 1e4:	30 40       	sbci	r19, 0x00	; 0
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	ca 01       	movw	r24, r20
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_WritePin+0x60>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	2a 95       	dec	r18
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_WritePin+0x5c>
 1f6:	80 95       	com	r24
 1f8:	86 23       	and	r24, r22
 1fa:	88 bb       	out	0x18, r24	; 24
 1fc:	08 95       	ret
		}
		else
		{
			setbit(PORTB,(PinNum-8));
 1fe:	68 b3       	in	r22, 0x18	; 24
 200:	28 2f       	mov	r18, r24
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	28 50       	subi	r18, 0x08	; 8
 206:	30 40       	sbci	r19, 0x00	; 0
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	50 e0       	ldi	r21, 0x00	; 0
 20c:	ca 01       	movw	r24, r20
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_WritePin+0x82>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	2a 95       	dec	r18
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_WritePin+0x7e>
 218:	86 2b       	or	r24, r22
 21a:	88 bb       	out	0x18, r24	; 24
 21c:	08 95       	ret
		}
	}
	else if((PinNum>=16)&&(PinNum<=23))
 21e:	98 2f       	mov	r25, r24
 220:	90 51       	subi	r25, 0x10	; 16
 222:	98 30       	cpi	r25, 0x08	; 8
 224:	18 f5       	brcc	.+70     	; 0x26c <DIO_WritePin+0xda>
	{
		if(PinValue==0)
 226:	66 23       	and	r22, r22
 228:	89 f4       	brne	.+34     	; 0x24c <DIO_WritePin+0xba>
		{
			clrbit(PORTC,(PinNum-16));
 22a:	65 b3       	in	r22, 0x15	; 21
 22c:	28 2f       	mov	r18, r24
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	20 51       	subi	r18, 0x10	; 16
 232:	30 40       	sbci	r19, 0x00	; 0
 234:	41 e0       	ldi	r20, 0x01	; 1
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	ca 01       	movw	r24, r20
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_WritePin+0xae>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	2a 95       	dec	r18
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_WritePin+0xaa>
 244:	80 95       	com	r24
 246:	86 23       	and	r24, r22
 248:	85 bb       	out	0x15, r24	; 21
 24a:	08 95       	ret
		}
		else
		{
			setbit(PORTC,(PinNum-16));
 24c:	65 b3       	in	r22, 0x15	; 21
 24e:	28 2f       	mov	r18, r24
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	20 51       	subi	r18, 0x10	; 16
 254:	30 40       	sbci	r19, 0x00	; 0
 256:	41 e0       	ldi	r20, 0x01	; 1
 258:	50 e0       	ldi	r21, 0x00	; 0
 25a:	ca 01       	movw	r24, r20
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_WritePin+0xd0>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	2a 95       	dec	r18
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_WritePin+0xcc>
 266:	86 2b       	or	r24, r22
 268:	85 bb       	out	0x15, r24	; 21
 26a:	08 95       	ret
		}
	}
	else if((PinNum>=24)&&((PinNum<=31)))
 26c:	98 2f       	mov	r25, r24
 26e:	98 51       	subi	r25, 0x18	; 24
 270:	98 30       	cpi	r25, 0x08	; 8
 272:	10 f5       	brcc	.+68     	; 0x2b8 <DIO_WritePin+0x126>
	{
		if(PinValue==0)
 274:	66 23       	and	r22, r22
 276:	89 f4       	brne	.+34     	; 0x29a <DIO_WritePin+0x108>
		{
			clrbit(PORTD,(PinNum-24));
 278:	62 b3       	in	r22, 0x12	; 18
 27a:	28 2f       	mov	r18, r24
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	28 51       	subi	r18, 0x18	; 24
 280:	30 40       	sbci	r19, 0x00	; 0
 282:	41 e0       	ldi	r20, 0x01	; 1
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	ca 01       	movw	r24, r20
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_WritePin+0xfc>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	2a 95       	dec	r18
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_WritePin+0xf8>
 292:	80 95       	com	r24
 294:	86 23       	and	r24, r22
 296:	82 bb       	out	0x12, r24	; 18
 298:	08 95       	ret
		}
		else
		{
			setbit(PORTD,(PinNum-24));
 29a:	62 b3       	in	r22, 0x12	; 18
 29c:	28 2f       	mov	r18, r24
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	28 51       	subi	r18, 0x18	; 24
 2a2:	30 40       	sbci	r19, 0x00	; 0
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	ca 01       	movw	r24, r20
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_WritePin+0x11e>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	2a 95       	dec	r18
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_WritePin+0x11a>
 2b4:	86 2b       	or	r24, r22
 2b6:	82 bb       	out	0x12, r24	; 18
 2b8:	08 95       	ret

000002ba <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 PinNum)
{
	uint8 PinValue;


	if((PinNum >= 0) && (PinNum <= 7))
 2ba:	88 30       	cpi	r24, 0x08	; 8
 2bc:	58 f4       	brcc	.+22     	; 0x2d4 <DIO_ReadPin+0x1a>
	{
		PinValue = getbit(PINA,PinNum);
 2be:	29 b3       	in	r18, 0x19	; 25
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	a9 01       	movw	r20, r18
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_ReadPin+0x10>
 2c6:	55 95       	asr	r21
 2c8:	47 95       	ror	r20
 2ca:	8a 95       	dec	r24
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_ReadPin+0xc>
 2ce:	94 2f       	mov	r25, r20
 2d0:	91 70       	andi	r25, 0x01	; 1
 2d2:	38 c0       	rjmp	.+112    	; 0x344 <DIO_ReadPin+0x8a>
	}
	else if((PinNum >= 8) && (PinNum <= 15))
 2d4:	28 2f       	mov	r18, r24
 2d6:	28 50       	subi	r18, 0x08	; 8
 2d8:	28 30       	cpi	r18, 0x08	; 8
 2da:	78 f4       	brcc	.+30     	; 0x2fa <DIO_ReadPin+0x40>
	{
		PinValue = getbit(PINB,(PinNum-8));
 2dc:	46 b3       	in	r20, 0x16	; 22
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	28 2f       	mov	r18, r24
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	28 50       	subi	r18, 0x08	; 8
 2e6:	30 40       	sbci	r19, 0x00	; 0
 2e8:	ca 01       	movw	r24, r20
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_ReadPin+0x36>
 2ec:	95 95       	asr	r25
 2ee:	87 95       	ror	r24
 2f0:	2a 95       	dec	r18
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_ReadPin+0x32>
 2f4:	98 2f       	mov	r25, r24
 2f6:	91 70       	andi	r25, 0x01	; 1
 2f8:	25 c0       	rjmp	.+74     	; 0x344 <DIO_ReadPin+0x8a>
	}
	else if((PinNum >= 16) && (PinNum <= 23))
 2fa:	28 2f       	mov	r18, r24
 2fc:	20 51       	subi	r18, 0x10	; 16
 2fe:	28 30       	cpi	r18, 0x08	; 8
 300:	78 f4       	brcc	.+30     	; 0x320 <DIO_ReadPin+0x66>
	{
		PinValue = getbit(PINC,(PinNum-16));
 302:	43 b3       	in	r20, 0x13	; 19
 304:	50 e0       	ldi	r21, 0x00	; 0
 306:	28 2f       	mov	r18, r24
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	20 51       	subi	r18, 0x10	; 16
 30c:	30 40       	sbci	r19, 0x00	; 0
 30e:	ca 01       	movw	r24, r20
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_ReadPin+0x5c>
 312:	95 95       	asr	r25
 314:	87 95       	ror	r24
 316:	2a 95       	dec	r18
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_ReadPin+0x58>
 31a:	98 2f       	mov	r25, r24
 31c:	91 70       	andi	r25, 0x01	; 1
 31e:	12 c0       	rjmp	.+36     	; 0x344 <DIO_ReadPin+0x8a>
	}
	else if((PinNum >= 24) && (PinNum <= 31))
 320:	28 2f       	mov	r18, r24
 322:	28 51       	subi	r18, 0x18	; 24
 324:	28 30       	cpi	r18, 0x08	; 8
 326:	70 f4       	brcc	.+28     	; 0x344 <DIO_ReadPin+0x8a>
	{
		PinValue = getbit(PIND,(PinNum-24));
 328:	40 b3       	in	r20, 0x10	; 16
 32a:	50 e0       	ldi	r21, 0x00	; 0
 32c:	28 2f       	mov	r18, r24
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	28 51       	subi	r18, 0x18	; 24
 332:	30 40       	sbci	r19, 0x00	; 0
 334:	ca 01       	movw	r24, r20
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_ReadPin+0x82>
 338:	95 95       	asr	r25
 33a:	87 95       	ror	r24
 33c:	2a 95       	dec	r18
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_ReadPin+0x7e>
 340:	98 2f       	mov	r25, r24
 342:	91 70       	andi	r25, 0x01	; 1
	}

	return PinValue;
}
 344:	89 2f       	mov	r24, r25
 346:	08 95       	ret

00000348 <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
	if((PinNum>=0)&&(PinNum<=7))
 348:	88 30       	cpi	r24, 0x08	; 8
 34a:	e8 f4       	brcc	.+58     	; 0x386 <DIO_SetPinDirection+0x3e>
	{
		if(PinDirection==0)
 34c:	66 23       	and	r22, r22
 34e:	71 f4       	brne	.+28     	; 0x36c <DIO_SetPinDirection+0x24>
		{
			clrbit(DDRA,PinNum);
 350:	4a b3       	in	r20, 0x1a	; 26
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	b9 01       	movw	r22, r18
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_SetPinDirection+0x16>
 35a:	66 0f       	add	r22, r22
 35c:	77 1f       	adc	r23, r23
 35e:	8a 95       	dec	r24
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_SetPinDirection+0x12>
 362:	cb 01       	movw	r24, r22
 364:	80 95       	com	r24
 366:	84 23       	and	r24, r20
 368:	8a bb       	out	0x1a, r24	; 26
 36a:	08 95       	ret
		}
		else
		{
			setbit(DDRA,PinNum);
 36c:	4a b3       	in	r20, 0x1a	; 26
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	b9 01       	movw	r22, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_SetPinDirection+0x32>
 376:	66 0f       	add	r22, r22
 378:	77 1f       	adc	r23, r23
 37a:	8a 95       	dec	r24
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_SetPinDirection+0x2e>
 37e:	cb 01       	movw	r24, r22
 380:	84 2b       	or	r24, r20
 382:	8a bb       	out	0x1a, r24	; 26
 384:	08 95       	ret
		}
	}
	else if((PinNum>=8)&&(PinNum<=15))
 386:	98 2f       	mov	r25, r24
 388:	98 50       	subi	r25, 0x08	; 8
 38a:	98 30       	cpi	r25, 0x08	; 8
 38c:	18 f5       	brcc	.+70     	; 0x3d4 <DIO_SetPinDirection+0x8c>
	{
		if(PinDirection==0)
 38e:	66 23       	and	r22, r22
 390:	89 f4       	brne	.+34     	; 0x3b4 <DIO_SetPinDirection+0x6c>
		{
			clrbit(DDRB,(PinNum-8));
 392:	67 b3       	in	r22, 0x17	; 23
 394:	28 2f       	mov	r18, r24
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	28 50       	subi	r18, 0x08	; 8
 39a:	30 40       	sbci	r19, 0x00	; 0
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	ca 01       	movw	r24, r20
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_SetPinDirection+0x60>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	2a 95       	dec	r18
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_SetPinDirection+0x5c>
 3ac:	80 95       	com	r24
 3ae:	86 23       	and	r24, r22
 3b0:	87 bb       	out	0x17, r24	; 23
 3b2:	08 95       	ret
		}
		else
		{
			setbit(DDRB,(PinNum-8));
 3b4:	67 b3       	in	r22, 0x17	; 23
 3b6:	28 2f       	mov	r18, r24
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	28 50       	subi	r18, 0x08	; 8
 3bc:	30 40       	sbci	r19, 0x00	; 0
 3be:	41 e0       	ldi	r20, 0x01	; 1
 3c0:	50 e0       	ldi	r21, 0x00	; 0
 3c2:	ca 01       	movw	r24, r20
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_SetPinDirection+0x82>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	2a 95       	dec	r18
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_SetPinDirection+0x7e>
 3ce:	86 2b       	or	r24, r22
 3d0:	87 bb       	out	0x17, r24	; 23
 3d2:	08 95       	ret
		}
	}
	else if((PinNum>=16)&&(PinNum<=23))
 3d4:	98 2f       	mov	r25, r24
 3d6:	90 51       	subi	r25, 0x10	; 16
 3d8:	98 30       	cpi	r25, 0x08	; 8
 3da:	18 f5       	brcc	.+70     	; 0x422 <DIO_SetPinDirection+0xda>
	{
		if(PinDirection==0)
 3dc:	66 23       	and	r22, r22
 3de:	89 f4       	brne	.+34     	; 0x402 <DIO_SetPinDirection+0xba>
		{
			clrbit(DDRC,(PinNum-16));
 3e0:	64 b3       	in	r22, 0x14	; 20
 3e2:	28 2f       	mov	r18, r24
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	20 51       	subi	r18, 0x10	; 16
 3e8:	30 40       	sbci	r19, 0x00	; 0
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	50 e0       	ldi	r21, 0x00	; 0
 3ee:	ca 01       	movw	r24, r20
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_SetPinDirection+0xae>
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	2a 95       	dec	r18
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_SetPinDirection+0xaa>
 3fa:	80 95       	com	r24
 3fc:	86 23       	and	r24, r22
 3fe:	84 bb       	out	0x14, r24	; 20
 400:	08 95       	ret
		}
		else
		{
			setbit(DDRC,(PinNum-16));
 402:	64 b3       	in	r22, 0x14	; 20
 404:	28 2f       	mov	r18, r24
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	20 51       	subi	r18, 0x10	; 16
 40a:	30 40       	sbci	r19, 0x00	; 0
 40c:	41 e0       	ldi	r20, 0x01	; 1
 40e:	50 e0       	ldi	r21, 0x00	; 0
 410:	ca 01       	movw	r24, r20
 412:	02 c0       	rjmp	.+4      	; 0x418 <DIO_SetPinDirection+0xd0>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	2a 95       	dec	r18
 41a:	e2 f7       	brpl	.-8      	; 0x414 <DIO_SetPinDirection+0xcc>
 41c:	86 2b       	or	r24, r22
 41e:	84 bb       	out	0x14, r24	; 20
 420:	08 95       	ret
		}
	}
	else if((PinNum>=24)&&((PinNum<=31)))
 422:	98 2f       	mov	r25, r24
 424:	98 51       	subi	r25, 0x18	; 24
 426:	98 30       	cpi	r25, 0x08	; 8
 428:	10 f5       	brcc	.+68     	; 0x46e <DIO_SetPinDirection+0x126>
	{
		if(PinDirection==0)
 42a:	66 23       	and	r22, r22
 42c:	89 f4       	brne	.+34     	; 0x450 <DIO_SetPinDirection+0x108>
		{
			clrbit(DDRD,(PinNum-24));
 42e:	61 b3       	in	r22, 0x11	; 17
 430:	28 2f       	mov	r18, r24
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	28 51       	subi	r18, 0x18	; 24
 436:	30 40       	sbci	r19, 0x00	; 0
 438:	41 e0       	ldi	r20, 0x01	; 1
 43a:	50 e0       	ldi	r21, 0x00	; 0
 43c:	ca 01       	movw	r24, r20
 43e:	02 c0       	rjmp	.+4      	; 0x444 <DIO_SetPinDirection+0xfc>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	2a 95       	dec	r18
 446:	e2 f7       	brpl	.-8      	; 0x440 <DIO_SetPinDirection+0xf8>
 448:	80 95       	com	r24
 44a:	86 23       	and	r24, r22
 44c:	81 bb       	out	0x11, r24	; 17
 44e:	08 95       	ret
		}
		else
		{
			setbit(DDRD,(PinNum-24));
 450:	61 b3       	in	r22, 0x11	; 17
 452:	28 2f       	mov	r18, r24
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	28 51       	subi	r18, 0x18	; 24
 458:	30 40       	sbci	r19, 0x00	; 0
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	50 e0       	ldi	r21, 0x00	; 0
 45e:	ca 01       	movw	r24, r20
 460:	02 c0       	rjmp	.+4      	; 0x466 <DIO_SetPinDirection+0x11e>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	2a 95       	dec	r18
 468:	e2 f7       	brpl	.-8      	; 0x462 <DIO_SetPinDirection+0x11a>
 46a:	86 2b       	or	r24, r22
 46c:	81 bb       	out	0x11, r24	; 17
 46e:	08 95       	ret

00000470 <motor_init>:
#include "motor.h"
#include "DIO.h"

void motor_init(){

    DIO_SetPinDirection( PIN30 , OUTPUT ); //motor2 A dir
 470:	8e e1       	ldi	r24, 0x1E	; 30
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPinDirection>
    DIO_SetPinDirection( PIN31 , OUTPUT ); //motor2 B dir
 478:	8f e1       	ldi	r24, 0x1F	; 31
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPinDirection>

    DIO_SetPinDirection( PIN26 , OUTPUT ); //motor1 A dir
 480:	8a e1       	ldi	r24, 0x1A	; 26
 482:	61 e0       	ldi	r22, 0x01	; 1
 484:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPinDirection>
    DIO_SetPinDirection( PIN27 , OUTPUT ); //motor1 B dir
 488:	8b e1       	ldi	r24, 0x1B	; 27
 48a:	61 e0       	ldi	r22, 0x01	; 1
 48c:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPinDirection>

    DIO_SetPinDirection( PIN29 , OUTPUT ); //motor1 en
 490:	8d e1       	ldi	r24, 0x1D	; 29
 492:	61 e0       	ldi	r22, 0x01	; 1
 494:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPinDirection>
    DIO_SetPinDirection( PIN28 , OUTPUT ); //motor2 en
 498:	8c e1       	ldi	r24, 0x1C	; 28
 49a:	61 e0       	ldi	r22, 0x01	; 1
 49c:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_SetPinDirection>

}
 4a0:	08 95       	ret

000004a2 <motor_forward>:

void motor_forward(){
    DIO_WritePin(PIN30 , HIGH);//motor2 A
 4a2:	8e e1       	ldi	r24, 0x1E	; 30
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WritePin>
    DIO_WritePin(PIN31 , LOW);//motor2 B 
 4aa:	8f e1       	ldi	r24, 0x1F	; 31
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WritePin>
	
    DIO_WritePin(PIN26 , HIGH);//motor1 A
 4b2:	8a e1       	ldi	r24, 0x1A	; 26
 4b4:	61 e0       	ldi	r22, 0x01	; 1
 4b6:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WritePin>
    DIO_WritePin(PIN27 , LOW);//motor1 B
 4ba:	8b e1       	ldi	r24, 0x1B	; 27
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WritePin>
}
 4c2:	08 95       	ret

000004c4 <motor_backward>:

void motor_backward(){

    DIO_WritePin(PIN30 , LOW);//motor2 A
 4c4:	8e e1       	ldi	r24, 0x1E	; 30
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WritePin>
    DIO_WritePin(PIN31 , HIGH);//motor2 B 
 4cc:	8f e1       	ldi	r24, 0x1F	; 31
 4ce:	61 e0       	ldi	r22, 0x01	; 1
 4d0:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WritePin>
    DIO_WritePin(PIN26 , LOW);//motor1 A
 4d4:	8a e1       	ldi	r24, 0x1A	; 26
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WritePin>
    DIO_WritePin(PIN27 , HIGH);//motor1 B
 4dc:	8b e1       	ldi	r24, 0x1B	; 27
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WritePin>
}
 4e4:	08 95       	ret

000004e6 <motor_right>:

void motor_right(){
    DIO_WritePin(PIN30 , HIGH);//motor2 A
 4e6:	8e e1       	ldi	r24, 0x1E	; 30
 4e8:	61 e0       	ldi	r22, 0x01	; 1
 4ea:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WritePin>
    DIO_WritePin(PIN31 , LOW);//motor2 B 
 4ee:	8f e1       	ldi	r24, 0x1F	; 31
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WritePin>
    DIO_WritePin(PIN26 , LOW);//motor1 A
 4f6:	8a e1       	ldi	r24, 0x1A	; 26
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WritePin>
    DIO_WritePin(PIN27 , HIGH);//motor1 B
 4fe:	8b e1       	ldi	r24, 0x1B	; 27
 500:	61 e0       	ldi	r22, 0x01	; 1
 502:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WritePin>
}
 506:	08 95       	ret

00000508 <motor_left>:

void motor_left(){

    DIO_WritePin(PIN30 , LOW);//motor2 A
 508:	8e e1       	ldi	r24, 0x1E	; 30
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WritePin>
    DIO_WritePin(PIN31 , HIGH);//motor2 B 
 510:	8f e1       	ldi	r24, 0x1F	; 31
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WritePin>
    DIO_WritePin(PIN26 , HIGH);//motor1 A
 518:	8a e1       	ldi	r24, 0x1A	; 26
 51a:	61 e0       	ldi	r22, 0x01	; 1
 51c:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WritePin>
    DIO_WritePin(PIN27 , LOW);//motor1 B
 520:	8b e1       	ldi	r24, 0x1B	; 27
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WritePin>
} 
 528:	08 95       	ret

0000052a <motor_stop>:

void motor_stop(){

    DIO_WritePin(PIN30 , LOW);//motor2 A
 52a:	8e e1       	ldi	r24, 0x1E	; 30
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WritePin>
    DIO_WritePin(PIN31 , LOW);//motor2 B 
 532:	8f e1       	ldi	r24, 0x1F	; 31
 534:	60 e0       	ldi	r22, 0x00	; 0
 536:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WritePin>
    DIO_WritePin(PIN26 , LOW);//motor1 A
 53a:	8a e1       	ldi	r24, 0x1A	; 26
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WritePin>
    DIO_WritePin(PIN27 , LOW);//motor1 B
 542:	8b e1       	ldi	r24, 0x1B	; 27
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WritePin>

}
 54a:	08 95       	ret

0000054c <pwm_init>:
#include "Timer.h"

uint8 pwm_inv =  Non_inverted ; 
void pwm_init(void) {
	
	timer0_init();
 54c:	0e 94 bf 02 	call	0x57e	; 0x57e <timer0_init>
	 if (pwm_inv == Non_inverted) {setbit(TCCR0,COM00); setbit(TCCR0,COM01);}
 550:	80 91 61 00 	lds	r24, 0x0061
 554:	81 30       	cpi	r24, 0x01	; 1
 556:	39 f4       	brne	.+14     	; 0x566 <pwm_init+0x1a>
 558:	83 b7       	in	r24, 0x33	; 51
 55a:	80 61       	ori	r24, 0x10	; 16
 55c:	83 bf       	out	0x33, r24	; 51
 55e:	83 b7       	in	r24, 0x33	; 51
 560:	80 62       	ori	r24, 0x20	; 32
 562:	83 bf       	out	0x33, r24	; 51
 564:	08 95       	ret
else if (pwm_inv == Inverted) {clrbit(TCCR0,COM00); setbit(TCCR0,COM01);}
 566:	88 23       	and	r24, r24
 568:	31 f4       	brne	.+12     	; 0x576 <pwm_init+0x2a>
 56a:	83 b7       	in	r24, 0x33	; 51
 56c:	8f 7e       	andi	r24, 0xEF	; 239
 56e:	83 bf       	out	0x33, r24	; 51
 570:	83 b7       	in	r24, 0x33	; 51
 572:	80 62       	ori	r24, 0x20	; 32
 574:	83 bf       	out	0x33, r24	; 51
 576:	08 95       	ret

00000578 <pwm_write>:
}


void pwm_write(uint8 speed) {
	
	OCR0 = 255 - speed ; 
 578:	80 95       	com	r24
 57a:	8c bf       	out	0x3c, r24	; 60
}
 57c:	08 95       	ret

0000057e <timer0_init>:

#include "Timer.h"
extern struct cnfg_type timer_cnfg;

void timer0_init(void){
	OCR0  = 0x00;
 57e:	1c be       	out	0x3c, r1	; 60
	TCCR0 = 0x00;
 580:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00; 
 582:	12 be       	out	0x32, r1	; 50
	
	if (timer_cnfg.mode== Normal_mode){	
 584:	80 91 62 00 	lds	r24, 0x0062
 588:	88 23       	and	r24, r24
 58a:	69 f4       	brne	.+26     	; 0x5a6 <timer0_init+0x28>
		clrbit(TCCR0,WGM00); clrbit(TCCR0,WGM01); clrbit(TCCR0,COM00); clrbit(TCCR0,COM01);		
 58c:	83 b7       	in	r24, 0x33	; 51
 58e:	8f 7b       	andi	r24, 0xBF	; 191
 590:	83 bf       	out	0x33, r24	; 51
 592:	83 b7       	in	r24, 0x33	; 51
 594:	87 7f       	andi	r24, 0xF7	; 247
 596:	83 bf       	out	0x33, r24	; 51
 598:	83 b7       	in	r24, 0x33	; 51
 59a:	8f 7e       	andi	r24, 0xEF	; 239
 59c:	83 bf       	out	0x33, r24	; 51
 59e:	83 b7       	in	r24, 0x33	; 51
 5a0:	8f 7d       	andi	r24, 0xDF	; 223
 5a2:	83 bf       	out	0x33, r24	; 51
 5a4:	26 c0       	rjmp	.+76     	; 0x5f2 <timer0_init+0x74>
	}
	else if (timer_cnfg.mode== PWM_PhaseCorrect) {
 5a6:	81 30       	cpi	r24, 0x01	; 1
 5a8:	39 f4       	brne	.+14     	; 0x5b8 <timer0_init+0x3a>
		setbit(TCCR0,WGM00); clrbit(TCCR0,WGM01); //setbit(TCCR0,COM00); setbit(TCCR0,COM01);
 5aa:	83 b7       	in	r24, 0x33	; 51
 5ac:	80 64       	ori	r24, 0x40	; 64
 5ae:	83 bf       	out	0x33, r24	; 51
 5b0:	83 b7       	in	r24, 0x33	; 51
 5b2:	87 7f       	andi	r24, 0xF7	; 247
 5b4:	83 bf       	out	0x33, r24	; 51
 5b6:	1d c0       	rjmp	.+58     	; 0x5f2 <timer0_init+0x74>
	}
	else if (timer_cnfg.mode== CTC) {
 5b8:	82 30       	cpi	r24, 0x02	; 2
 5ba:	69 f4       	brne	.+26     	; 0x5d6 <timer0_init+0x58>
		clrbit(TCCR0,WGM00); setbit(TCCR0,WGM01); setbit(TCCR0,COM00); clrbit(TCCR0,COM01);
 5bc:	83 b7       	in	r24, 0x33	; 51
 5be:	8f 7b       	andi	r24, 0xBF	; 191
 5c0:	83 bf       	out	0x33, r24	; 51
 5c2:	83 b7       	in	r24, 0x33	; 51
 5c4:	88 60       	ori	r24, 0x08	; 8
 5c6:	83 bf       	out	0x33, r24	; 51
 5c8:	83 b7       	in	r24, 0x33	; 51
 5ca:	80 61       	ori	r24, 0x10	; 16
 5cc:	83 bf       	out	0x33, r24	; 51
 5ce:	83 b7       	in	r24, 0x33	; 51
 5d0:	8f 7d       	andi	r24, 0xDF	; 223
 5d2:	83 bf       	out	0x33, r24	; 51
 5d4:	0e c0       	rjmp	.+28     	; 0x5f2 <timer0_init+0x74>
	}
	else if (timer_cnfg.mode== Fast_PWM) {
 5d6:	83 30       	cpi	r24, 0x03	; 3
 5d8:	61 f4       	brne	.+24     	; 0x5f2 <timer0_init+0x74>
        setbit(TCCR0,WGM00); setbit(TCCR0,WGM01); setbit(TCCR0,COM00); setbit(TCCR0,COM01);			
 5da:	83 b7       	in	r24, 0x33	; 51
 5dc:	80 64       	ori	r24, 0x40	; 64
 5de:	83 bf       	out	0x33, r24	; 51
 5e0:	83 b7       	in	r24, 0x33	; 51
 5e2:	88 60       	ori	r24, 0x08	; 8
 5e4:	83 bf       	out	0x33, r24	; 51
 5e6:	83 b7       	in	r24, 0x33	; 51
 5e8:	80 61       	ori	r24, 0x10	; 16
 5ea:	83 bf       	out	0x33, r24	; 51
 5ec:	83 b7       	in	r24, 0x33	; 51
 5ee:	80 62       	ori	r24, 0x20	; 32
 5f0:	83 bf       	out	0x33, r24	; 51
	}
	
     if (timer_cnfg.prescaler== no_prescaler ) {setbit(TCCR0,CS00); clrbit(TCCR0,CS01); clrbit(TCCR0,CS02);}
 5f2:	80 91 63 00 	lds	r24, 0x0063
 5f6:	90 91 64 00 	lds	r25, 0x0064
 5fa:	00 97       	sbiw	r24, 0x00	; 0
 5fc:	51 f4       	brne	.+20     	; 0x612 <timer0_init+0x94>
 5fe:	83 b7       	in	r24, 0x33	; 51
 600:	81 60       	ori	r24, 0x01	; 1
 602:	83 bf       	out	0x33, r24	; 51
 604:	83 b7       	in	r24, 0x33	; 51
 606:	8d 7f       	andi	r24, 0xFD	; 253
 608:	83 bf       	out	0x33, r24	; 51
 60a:	83 b7       	in	r24, 0x33	; 51
 60c:	8b 7f       	andi	r24, 0xFB	; 251
 60e:	83 bf       	out	0x33, r24	; 51
 610:	4f c0       	rjmp	.+158    	; 0x6b0 <timer0_init+0x132>
else if (timer_cnfg.prescaler== 8 )    {clrbit(TCCR0,CS00); setbit(TCCR0,CS01); clrbit(TCCR0,CS02);}
 612:	88 30       	cpi	r24, 0x08	; 8
 614:	91 05       	cpc	r25, r1
 616:	51 f4       	brne	.+20     	; 0x62c <timer0_init+0xae>
 618:	83 b7       	in	r24, 0x33	; 51
 61a:	8e 7f       	andi	r24, 0xFE	; 254
 61c:	83 bf       	out	0x33, r24	; 51
 61e:	83 b7       	in	r24, 0x33	; 51
 620:	82 60       	ori	r24, 0x02	; 2
 622:	83 bf       	out	0x33, r24	; 51
 624:	83 b7       	in	r24, 0x33	; 51
 626:	8b 7f       	andi	r24, 0xFB	; 251
 628:	83 bf       	out	0x33, r24	; 51
 62a:	42 c0       	rjmp	.+132    	; 0x6b0 <timer0_init+0x132>
else if (timer_cnfg.prescaler== 64 )   {setbit(TCCR0,CS00); setbit(TCCR0,CS01); clrbit(TCCR0,CS02);}
 62c:	80 34       	cpi	r24, 0x40	; 64
 62e:	91 05       	cpc	r25, r1
 630:	51 f4       	brne	.+20     	; 0x646 <timer0_init+0xc8>
 632:	83 b7       	in	r24, 0x33	; 51
 634:	81 60       	ori	r24, 0x01	; 1
 636:	83 bf       	out	0x33, r24	; 51
 638:	83 b7       	in	r24, 0x33	; 51
 63a:	82 60       	ori	r24, 0x02	; 2
 63c:	83 bf       	out	0x33, r24	; 51
 63e:	83 b7       	in	r24, 0x33	; 51
 640:	8b 7f       	andi	r24, 0xFB	; 251
 642:	83 bf       	out	0x33, r24	; 51
 644:	35 c0       	rjmp	.+106    	; 0x6b0 <timer0_init+0x132>
else if (timer_cnfg.prescaler== 256 )  {clrbit(TCCR0,CS00); clrbit(TCCR0,CS01); setbit(TCCR0,CS02);}
 646:	21 e0       	ldi	r18, 0x01	; 1
 648:	80 30       	cpi	r24, 0x00	; 0
 64a:	92 07       	cpc	r25, r18
 64c:	51 f4       	brne	.+20     	; 0x662 <timer0_init+0xe4>
 64e:	83 b7       	in	r24, 0x33	; 51
 650:	8e 7f       	andi	r24, 0xFE	; 254
 652:	83 bf       	out	0x33, r24	; 51
 654:	83 b7       	in	r24, 0x33	; 51
 656:	8d 7f       	andi	r24, 0xFD	; 253
 658:	83 bf       	out	0x33, r24	; 51
 65a:	83 b7       	in	r24, 0x33	; 51
 65c:	84 60       	ori	r24, 0x04	; 4
 65e:	83 bf       	out	0x33, r24	; 51
 660:	27 c0       	rjmp	.+78     	; 0x6b0 <timer0_init+0x132>
else if (timer_cnfg.prescaler== 1024 ) {setbit(TCCR0,CS00); clrbit(TCCR0,CS01); setbit(TCCR0,CS02);}
 662:	24 e0       	ldi	r18, 0x04	; 4
 664:	80 30       	cpi	r24, 0x00	; 0
 666:	92 07       	cpc	r25, r18
 668:	51 f4       	brne	.+20     	; 0x67e <timer0_init+0x100>
 66a:	83 b7       	in	r24, 0x33	; 51
 66c:	81 60       	ori	r24, 0x01	; 1
 66e:	83 bf       	out	0x33, r24	; 51
 670:	83 b7       	in	r24, 0x33	; 51
 672:	8d 7f       	andi	r24, 0xFD	; 253
 674:	83 bf       	out	0x33, r24	; 51
 676:	83 b7       	in	r24, 0x33	; 51
 678:	84 60       	ori	r24, 0x04	; 4
 67a:	83 bf       	out	0x33, r24	; 51
 67c:	19 c0       	rjmp	.+50     	; 0x6b0 <timer0_init+0x132>
else if (timer_cnfg.prescaler== XFE )  {clrbit(TCCR0,CS00); setbit(TCCR0,CS01); setbit(TCCR0,CS02);}
 67e:	82 30       	cpi	r24, 0x02	; 2
 680:	91 05       	cpc	r25, r1
 682:	51 f4       	brne	.+20     	; 0x698 <timer0_init+0x11a>
 684:	83 b7       	in	r24, 0x33	; 51
 686:	8e 7f       	andi	r24, 0xFE	; 254
 688:	83 bf       	out	0x33, r24	; 51
 68a:	83 b7       	in	r24, 0x33	; 51
 68c:	82 60       	ori	r24, 0x02	; 2
 68e:	83 bf       	out	0x33, r24	; 51
 690:	83 b7       	in	r24, 0x33	; 51
 692:	84 60       	ori	r24, 0x04	; 4
 694:	83 bf       	out	0x33, r24	; 51
 696:	0c c0       	rjmp	.+24     	; 0x6b0 <timer0_init+0x132>
else if (timer_cnfg.prescaler== XRE )  {setbit(TCCR0,CS00); setbit(TCCR0,CS01); setbit(TCCR0,CS02);}
 698:	83 30       	cpi	r24, 0x03	; 3
 69a:	91 05       	cpc	r25, r1
 69c:	49 f4       	brne	.+18     	; 0x6b0 <timer0_init+0x132>
 69e:	83 b7       	in	r24, 0x33	; 51
 6a0:	81 60       	ori	r24, 0x01	; 1
 6a2:	83 bf       	out	0x33, r24	; 51
 6a4:	83 b7       	in	r24, 0x33	; 51
 6a6:	82 60       	ori	r24, 0x02	; 2
 6a8:	83 bf       	out	0x33, r24	; 51
 6aa:	83 b7       	in	r24, 0x33	; 51
 6ac:	84 60       	ori	r24, 0x04	; 4
 6ae:	83 bf       	out	0x33, r24	; 51
	
	

	if      (timer_cnfg.CMI==Enabled)  { setbit(TIMSK,OCIE0); setbit(SREG,7); }
 6b0:	80 91 65 00 	lds	r24, 0x0065
 6b4:	81 30       	cpi	r24, 0x01	; 1
 6b6:	39 f4       	brne	.+14     	; 0x6c6 <timer0_init+0x148>
 6b8:	89 b7       	in	r24, 0x39	; 57
 6ba:	82 60       	ori	r24, 0x02	; 2
 6bc:	89 bf       	out	0x39, r24	; 57
 6be:	8f b7       	in	r24, 0x3f	; 63
 6c0:	80 68       	ori	r24, 0x80	; 128
 6c2:	8f bf       	out	0x3f, r24	; 63
 6c4:	05 c0       	rjmp	.+10     	; 0x6d0 <timer0_init+0x152>
	else if (timer_cnfg.CMI==Disabled) { clrbit(TIMSK,OCIE0); }
 6c6:	88 23       	and	r24, r24
 6c8:	19 f4       	brne	.+6      	; 0x6d0 <timer0_init+0x152>
 6ca:	89 b7       	in	r24, 0x39	; 57
 6cc:	8d 7f       	andi	r24, 0xFD	; 253
 6ce:	89 bf       	out	0x39, r24	; 57
		
    if      (timer_cnfg.OVI==Enabled)  { setbit(TIMSK,TOIE0);setbit(SREG,7); }
 6d0:	80 91 66 00 	lds	r24, 0x0066
 6d4:	81 30       	cpi	r24, 0x01	; 1
 6d6:	39 f4       	brne	.+14     	; 0x6e6 <timer0_init+0x168>
 6d8:	89 b7       	in	r24, 0x39	; 57
 6da:	81 60       	ori	r24, 0x01	; 1
 6dc:	89 bf       	out	0x39, r24	; 57
 6de:	8f b7       	in	r24, 0x3f	; 63
 6e0:	80 68       	ori	r24, 0x80	; 128
 6e2:	8f bf       	out	0x3f, r24	; 63
 6e4:	08 95       	ret
	else if (timer_cnfg.OVI==Disabled) { clrbit(TIMSK,TOIE0); }
 6e6:	88 23       	and	r24, r24
 6e8:	19 f4       	brne	.+6      	; 0x6f0 <timer0_init+0x172>
 6ea:	89 b7       	in	r24, 0x39	; 57
 6ec:	8e 7f       	andi	r24, 0xFE	; 254
 6ee:	89 bf       	out	0x39, r24	; 57
 6f0:	08 95       	ret

000006f2 <timer1_init>:
}


void timer1_init(void){
	//clear all registers
	TCCR1A = 0x00;
 6f2:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x00;
 6f4:	1e bc       	out	0x2e, r1	; 46
	TCNT1H = 0x00;
 6f6:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0x00;
 6f8:	1c bc       	out	0x2c, r1	; 44
	OCR1AH = 0x00;
 6fa:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = 0x00;
 6fc:	1a bc       	out	0x2a, r1	; 42
	OCR1BH = 0x00;
 6fe:	19 bc       	out	0x29, r1	; 41
	OCR1BL = 0x00;
 700:	18 bc       	out	0x28, r1	; 40
	ICR1H  = 0x00;
 702:	17 bc       	out	0x27, r1	; 39
	ICR1L  = 0x00;
 704:	16 bc       	out	0x26, r1	; 38
		setbit(TCCR0,WGM00); setbit(TCCR0,WGM01); setbit(TCCR0,COM00); setbit(TCCR0,COM01);
	}
	*/


}
 706:	08 95       	ret

00000708 <timer_delay>:

void timer_delay(uint32 n){
	TCNT0 = 0;
 708:	12 be       	out	0x32, r1	; 50
	OCR0 = 125;
 70a:	2d e7       	ldi	r18, 0x7D	; 125
 70c:	2c bf       	out	0x3c, r18	; 60
	while (n != 0)
 70e:	00 97       	sbiw	r24, 0x00	; 0
 710:	49 f0       	breq	.+18     	; 0x724 <timer_delay+0x1c>
	{
      while ((getbit(TIFR,OCF0)) != 1 );
 712:	28 b7       	in	r18, 0x38	; 56
 714:	21 ff       	sbrs	r18, 1
 716:	fd cf       	rjmp	.-6      	; 0x712 <timer_delay+0xa>
	  n--;
 718:	01 97       	sbiw	r24, 0x01	; 1
	  setbit(TIFR,OCF0);		
 71a:	28 b7       	in	r18, 0x38	; 56
 71c:	22 60       	ori	r18, 0x02	; 2
 71e:	28 bf       	out	0x38, r18	; 56
}

void timer_delay(uint32 n){
	TCNT0 = 0;
	OCR0 = 125;
	while (n != 0)
 720:	00 97       	sbiw	r24, 0x00	; 0
 722:	b9 f7       	brne	.-18     	; 0x712 <timer_delay+0xa>
 724:	08 95       	ret

00000726 <_exit>:
 726:	f8 94       	cli

00000728 <__stop_program>:
 728:	ff cf       	rjmp	.-2      	; 0x728 <__stop_program>
