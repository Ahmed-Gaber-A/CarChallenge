
ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000009b8  00000a4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800066  00800066  00000a52  2**0
                  ALLOC
  3 .stab         00001674  00000000  00000000  00000a54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  000020c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00002588  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000946  00000000  00000000  00002688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000041c  00000000  00000000  00002fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b6  00000000  00000000  000033ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  000039a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000264  00000000  00000000  00003ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000349  00000000  00000000  00003d2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <main>
  8a:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WritePin>:

#include "DIO.h"

void DIO_WritePin (uint8 PinNum , uint8 PinValue)
{
	if((PinNum>=0)&&(PinNum<=7))
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	e8 f4       	brcc	.+58     	; 0xd0 <DIO_WritePin+0x3e>
	{
		if(PinValue==0)
  96:	66 23       	and	r22, r22
  98:	71 f4       	brne	.+28     	; 0xb6 <DIO_WritePin+0x24>
		{
			clrbit(PORTA,PinNum);
  9a:	4b b3       	in	r20, 0x1b	; 27
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	b9 01       	movw	r22, r18
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_WritePin+0x16>
  a4:	66 0f       	add	r22, r22
  a6:	77 1f       	adc	r23, r23
  a8:	8a 95       	dec	r24
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_WritePin+0x12>
  ac:	cb 01       	movw	r24, r22
  ae:	80 95       	com	r24
  b0:	84 23       	and	r24, r20
  b2:	8b bb       	out	0x1b, r24	; 27
  b4:	08 95       	ret
		}
		else
		{
			setbit(PORTA,PinNum);
  b6:	4b b3       	in	r20, 0x1b	; 27
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	b9 01       	movw	r22, r18
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DIO_WritePin+0x32>
  c0:	66 0f       	add	r22, r22
  c2:	77 1f       	adc	r23, r23
  c4:	8a 95       	dec	r24
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DIO_WritePin+0x2e>
  c8:	cb 01       	movw	r24, r22
  ca:	84 2b       	or	r24, r20
  cc:	8b bb       	out	0x1b, r24	; 27
  ce:	08 95       	ret
		}
	}
	else if((PinNum>=8)&&(PinNum<=15))
  d0:	98 2f       	mov	r25, r24
  d2:	98 50       	subi	r25, 0x08	; 8
  d4:	98 30       	cpi	r25, 0x08	; 8
  d6:	18 f5       	brcc	.+70     	; 0x11e <DIO_WritePin+0x8c>
	{
		if(PinValue==0)
  d8:	66 23       	and	r22, r22
  da:	89 f4       	brne	.+34     	; 0xfe <DIO_WritePin+0x6c>
		{
			clrbit(PORTB,(PinNum-8));
  dc:	68 b3       	in	r22, 0x18	; 24
  de:	28 2f       	mov	r18, r24
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	28 50       	subi	r18, 0x08	; 8
  e4:	30 40       	sbci	r19, 0x00	; 0
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	ca 01       	movw	r24, r20
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_WritePin+0x60>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	2a 95       	dec	r18
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_WritePin+0x5c>
  f6:	80 95       	com	r24
  f8:	86 23       	and	r24, r22
  fa:	88 bb       	out	0x18, r24	; 24
  fc:	08 95       	ret
		}
		else
		{
			setbit(PORTB,(PinNum-8));
  fe:	68 b3       	in	r22, 0x18	; 24
 100:	28 2f       	mov	r18, r24
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	28 50       	subi	r18, 0x08	; 8
 106:	30 40       	sbci	r19, 0x00	; 0
 108:	41 e0       	ldi	r20, 0x01	; 1
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	ca 01       	movw	r24, r20
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_WritePin+0x82>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	2a 95       	dec	r18
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_WritePin+0x7e>
 118:	86 2b       	or	r24, r22
 11a:	88 bb       	out	0x18, r24	; 24
 11c:	08 95       	ret
		}
	}
	else if((PinNum>=16)&&(PinNum<=23))
 11e:	98 2f       	mov	r25, r24
 120:	90 51       	subi	r25, 0x10	; 16
 122:	98 30       	cpi	r25, 0x08	; 8
 124:	18 f5       	brcc	.+70     	; 0x16c <DIO_WritePin+0xda>
	{
		if(PinValue==0)
 126:	66 23       	and	r22, r22
 128:	89 f4       	brne	.+34     	; 0x14c <DIO_WritePin+0xba>
		{
			clrbit(PORTC,(PinNum-16));
 12a:	65 b3       	in	r22, 0x15	; 21
 12c:	28 2f       	mov	r18, r24
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	20 51       	subi	r18, 0x10	; 16
 132:	30 40       	sbci	r19, 0x00	; 0
 134:	41 e0       	ldi	r20, 0x01	; 1
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	ca 01       	movw	r24, r20
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_WritePin+0xae>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	2a 95       	dec	r18
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_WritePin+0xaa>
 144:	80 95       	com	r24
 146:	86 23       	and	r24, r22
 148:	85 bb       	out	0x15, r24	; 21
 14a:	08 95       	ret
		}
		else
		{
			setbit(PORTC,(PinNum-16));
 14c:	65 b3       	in	r22, 0x15	; 21
 14e:	28 2f       	mov	r18, r24
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	20 51       	subi	r18, 0x10	; 16
 154:	30 40       	sbci	r19, 0x00	; 0
 156:	41 e0       	ldi	r20, 0x01	; 1
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	ca 01       	movw	r24, r20
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_WritePin+0xd0>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	2a 95       	dec	r18
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_WritePin+0xcc>
 166:	86 2b       	or	r24, r22
 168:	85 bb       	out	0x15, r24	; 21
 16a:	08 95       	ret
		}
	}
	else if((PinNum>=24)&&((PinNum<=31)))
 16c:	98 2f       	mov	r25, r24
 16e:	98 51       	subi	r25, 0x18	; 24
 170:	98 30       	cpi	r25, 0x08	; 8
 172:	10 f5       	brcc	.+68     	; 0x1b8 <DIO_WritePin+0x126>
	{
		if(PinValue==0)
 174:	66 23       	and	r22, r22
 176:	89 f4       	brne	.+34     	; 0x19a <DIO_WritePin+0x108>
		{
			clrbit(PORTD,(PinNum-24));
 178:	62 b3       	in	r22, 0x12	; 18
 17a:	28 2f       	mov	r18, r24
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	28 51       	subi	r18, 0x18	; 24
 180:	30 40       	sbci	r19, 0x00	; 0
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	50 e0       	ldi	r21, 0x00	; 0
 186:	ca 01       	movw	r24, r20
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_WritePin+0xfc>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	2a 95       	dec	r18
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_WritePin+0xf8>
 192:	80 95       	com	r24
 194:	86 23       	and	r24, r22
 196:	82 bb       	out	0x12, r24	; 18
 198:	08 95       	ret
		}
		else
		{
			setbit(PORTD,(PinNum-24));
 19a:	62 b3       	in	r22, 0x12	; 18
 19c:	28 2f       	mov	r18, r24
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	28 51       	subi	r18, 0x18	; 24
 1a2:	30 40       	sbci	r19, 0x00	; 0
 1a4:	41 e0       	ldi	r20, 0x01	; 1
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	ca 01       	movw	r24, r20
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_WritePin+0x11e>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	2a 95       	dec	r18
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_WritePin+0x11a>
 1b4:	86 2b       	or	r24, r22
 1b6:	82 bb       	out	0x12, r24	; 18
 1b8:	08 95       	ret

000001ba <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 PinNum)
{
	uint8 PinValue;


	if((PinNum >= 0) && (PinNum <= 7))
 1ba:	88 30       	cpi	r24, 0x08	; 8
 1bc:	58 f4       	brcc	.+22     	; 0x1d4 <DIO_ReadPin+0x1a>
	{
		PinValue = getbit(PINA,PinNum);
 1be:	29 b3       	in	r18, 0x19	; 25
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	a9 01       	movw	r20, r18
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_ReadPin+0x10>
 1c6:	55 95       	asr	r21
 1c8:	47 95       	ror	r20
 1ca:	8a 95       	dec	r24
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_ReadPin+0xc>
 1ce:	94 2f       	mov	r25, r20
 1d0:	91 70       	andi	r25, 0x01	; 1
 1d2:	38 c0       	rjmp	.+112    	; 0x244 <DIO_ReadPin+0x8a>
	}
	else if((PinNum >= 8) && (PinNum <= 15))
 1d4:	28 2f       	mov	r18, r24
 1d6:	28 50       	subi	r18, 0x08	; 8
 1d8:	28 30       	cpi	r18, 0x08	; 8
 1da:	78 f4       	brcc	.+30     	; 0x1fa <DIO_ReadPin+0x40>
	{
		PinValue = getbit(PINB,(PinNum-8));
 1dc:	46 b3       	in	r20, 0x16	; 22
 1de:	50 e0       	ldi	r21, 0x00	; 0
 1e0:	28 2f       	mov	r18, r24
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	28 50       	subi	r18, 0x08	; 8
 1e6:	30 40       	sbci	r19, 0x00	; 0
 1e8:	ca 01       	movw	r24, r20
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_ReadPin+0x36>
 1ec:	95 95       	asr	r25
 1ee:	87 95       	ror	r24
 1f0:	2a 95       	dec	r18
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_ReadPin+0x32>
 1f4:	98 2f       	mov	r25, r24
 1f6:	91 70       	andi	r25, 0x01	; 1
 1f8:	25 c0       	rjmp	.+74     	; 0x244 <DIO_ReadPin+0x8a>
	}
	else if((PinNum >= 16) && (PinNum <= 23))
 1fa:	28 2f       	mov	r18, r24
 1fc:	20 51       	subi	r18, 0x10	; 16
 1fe:	28 30       	cpi	r18, 0x08	; 8
 200:	78 f4       	brcc	.+30     	; 0x220 <DIO_ReadPin+0x66>
	{
		PinValue = getbit(PINC,(PinNum-16));
 202:	43 b3       	in	r20, 0x13	; 19
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	28 2f       	mov	r18, r24
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	20 51       	subi	r18, 0x10	; 16
 20c:	30 40       	sbci	r19, 0x00	; 0
 20e:	ca 01       	movw	r24, r20
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_ReadPin+0x5c>
 212:	95 95       	asr	r25
 214:	87 95       	ror	r24
 216:	2a 95       	dec	r18
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_ReadPin+0x58>
 21a:	98 2f       	mov	r25, r24
 21c:	91 70       	andi	r25, 0x01	; 1
 21e:	12 c0       	rjmp	.+36     	; 0x244 <DIO_ReadPin+0x8a>
	}
	else if((PinNum >= 24) && (PinNum <= 31))
 220:	28 2f       	mov	r18, r24
 222:	28 51       	subi	r18, 0x18	; 24
 224:	28 30       	cpi	r18, 0x08	; 8
 226:	70 f4       	brcc	.+28     	; 0x244 <DIO_ReadPin+0x8a>
	{
		PinValue = getbit(PIND,(PinNum-24));
 228:	40 b3       	in	r20, 0x10	; 16
 22a:	50 e0       	ldi	r21, 0x00	; 0
 22c:	28 2f       	mov	r18, r24
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	28 51       	subi	r18, 0x18	; 24
 232:	30 40       	sbci	r19, 0x00	; 0
 234:	ca 01       	movw	r24, r20
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_ReadPin+0x82>
 238:	95 95       	asr	r25
 23a:	87 95       	ror	r24
 23c:	2a 95       	dec	r18
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_ReadPin+0x7e>
 240:	98 2f       	mov	r25, r24
 242:	91 70       	andi	r25, 0x01	; 1
	}

	return PinValue;
}
 244:	89 2f       	mov	r24, r25
 246:	08 95       	ret

00000248 <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
	if((PinNum>=0)&&(PinNum<=7))
 248:	88 30       	cpi	r24, 0x08	; 8
 24a:	e8 f4       	brcc	.+58     	; 0x286 <DIO_SetPinDirection+0x3e>
	{
		if(PinDirection==0)
 24c:	66 23       	and	r22, r22
 24e:	71 f4       	brne	.+28     	; 0x26c <DIO_SetPinDirection+0x24>
		{
			clrbit(DDRA,PinNum);
 250:	4a b3       	in	r20, 0x1a	; 26
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	b9 01       	movw	r22, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_SetPinDirection+0x16>
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	8a 95       	dec	r24
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_SetPinDirection+0x12>
 262:	cb 01       	movw	r24, r22
 264:	80 95       	com	r24
 266:	84 23       	and	r24, r20
 268:	8a bb       	out	0x1a, r24	; 26
 26a:	08 95       	ret
		}
		else
		{
			setbit(DDRA,PinNum);
 26c:	4a b3       	in	r20, 0x1a	; 26
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	b9 01       	movw	r22, r18
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_SetPinDirection+0x32>
 276:	66 0f       	add	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	8a 95       	dec	r24
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_SetPinDirection+0x2e>
 27e:	cb 01       	movw	r24, r22
 280:	84 2b       	or	r24, r20
 282:	8a bb       	out	0x1a, r24	; 26
 284:	08 95       	ret
		}
	}
	else if((PinNum>=8)&&(PinNum<=15))
 286:	98 2f       	mov	r25, r24
 288:	98 50       	subi	r25, 0x08	; 8
 28a:	98 30       	cpi	r25, 0x08	; 8
 28c:	18 f5       	brcc	.+70     	; 0x2d4 <DIO_SetPinDirection+0x8c>
	{
		if(PinDirection==0)
 28e:	66 23       	and	r22, r22
 290:	89 f4       	brne	.+34     	; 0x2b4 <DIO_SetPinDirection+0x6c>
		{
			clrbit(DDRB,(PinNum-8));
 292:	67 b3       	in	r22, 0x17	; 23
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	28 50       	subi	r18, 0x08	; 8
 29a:	30 40       	sbci	r19, 0x00	; 0
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	50 e0       	ldi	r21, 0x00	; 0
 2a0:	ca 01       	movw	r24, r20
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_SetPinDirection+0x60>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	2a 95       	dec	r18
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_SetPinDirection+0x5c>
 2ac:	80 95       	com	r24
 2ae:	86 23       	and	r24, r22
 2b0:	87 bb       	out	0x17, r24	; 23
 2b2:	08 95       	ret
		}
		else
		{
			setbit(DDRB,(PinNum-8));
 2b4:	67 b3       	in	r22, 0x17	; 23
 2b6:	28 2f       	mov	r18, r24
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	28 50       	subi	r18, 0x08	; 8
 2bc:	30 40       	sbci	r19, 0x00	; 0
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	50 e0       	ldi	r21, 0x00	; 0
 2c2:	ca 01       	movw	r24, r20
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_SetPinDirection+0x82>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	2a 95       	dec	r18
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_SetPinDirection+0x7e>
 2ce:	86 2b       	or	r24, r22
 2d0:	87 bb       	out	0x17, r24	; 23
 2d2:	08 95       	ret
		}
	}
	else if((PinNum>=16)&&(PinNum<=23))
 2d4:	98 2f       	mov	r25, r24
 2d6:	90 51       	subi	r25, 0x10	; 16
 2d8:	98 30       	cpi	r25, 0x08	; 8
 2da:	18 f5       	brcc	.+70     	; 0x322 <DIO_SetPinDirection+0xda>
	{
		if(PinDirection==0)
 2dc:	66 23       	and	r22, r22
 2de:	89 f4       	brne	.+34     	; 0x302 <DIO_SetPinDirection+0xba>
		{
			clrbit(DDRC,(PinNum-16));
 2e0:	64 b3       	in	r22, 0x14	; 20
 2e2:	28 2f       	mov	r18, r24
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	20 51       	subi	r18, 0x10	; 16
 2e8:	30 40       	sbci	r19, 0x00	; 0
 2ea:	41 e0       	ldi	r20, 0x01	; 1
 2ec:	50 e0       	ldi	r21, 0x00	; 0
 2ee:	ca 01       	movw	r24, r20
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_SetPinDirection+0xae>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	2a 95       	dec	r18
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_SetPinDirection+0xaa>
 2fa:	80 95       	com	r24
 2fc:	86 23       	and	r24, r22
 2fe:	84 bb       	out	0x14, r24	; 20
 300:	08 95       	ret
		}
		else
		{
			setbit(DDRC,(PinNum-16));
 302:	64 b3       	in	r22, 0x14	; 20
 304:	28 2f       	mov	r18, r24
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	20 51       	subi	r18, 0x10	; 16
 30a:	30 40       	sbci	r19, 0x00	; 0
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	50 e0       	ldi	r21, 0x00	; 0
 310:	ca 01       	movw	r24, r20
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_SetPinDirection+0xd0>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	2a 95       	dec	r18
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_SetPinDirection+0xcc>
 31c:	86 2b       	or	r24, r22
 31e:	84 bb       	out	0x14, r24	; 20
 320:	08 95       	ret
		}
	}
	else if((PinNum>=24)&&((PinNum<=31)))
 322:	98 2f       	mov	r25, r24
 324:	98 51       	subi	r25, 0x18	; 24
 326:	98 30       	cpi	r25, 0x08	; 8
 328:	10 f5       	brcc	.+68     	; 0x36e <DIO_SetPinDirection+0x126>
	{
		if(PinDirection==0)
 32a:	66 23       	and	r22, r22
 32c:	89 f4       	brne	.+34     	; 0x350 <DIO_SetPinDirection+0x108>
		{
			clrbit(DDRD,(PinNum-24));
 32e:	61 b3       	in	r22, 0x11	; 17
 330:	28 2f       	mov	r18, r24
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	28 51       	subi	r18, 0x18	; 24
 336:	30 40       	sbci	r19, 0x00	; 0
 338:	41 e0       	ldi	r20, 0x01	; 1
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	ca 01       	movw	r24, r20
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_SetPinDirection+0xfc>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	2a 95       	dec	r18
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_SetPinDirection+0xf8>
 348:	80 95       	com	r24
 34a:	86 23       	and	r24, r22
 34c:	81 bb       	out	0x11, r24	; 17
 34e:	08 95       	ret
		}
		else
		{
			setbit(DDRD,(PinNum-24));
 350:	61 b3       	in	r22, 0x11	; 17
 352:	28 2f       	mov	r18, r24
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	28 51       	subi	r18, 0x18	; 24
 358:	30 40       	sbci	r19, 0x00	; 0
 35a:	41 e0       	ldi	r20, 0x01	; 1
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	ca 01       	movw	r24, r20
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_SetPinDirection+0x11e>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	2a 95       	dec	r18
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_SetPinDirection+0x11a>
 36a:	86 2b       	or	r24, r22
 36c:	81 bb       	out	0x11, r24	; 17
 36e:	08 95       	ret

00000370 <ICU_init>:
uint8 trigger = falling  ; //
uint8 ICU_INT = Disabled ;

void ICU_init(void) {
	//edge trigger select
   	 if (trigger == rising ) { setbit(TCCR1B,ICES1);}
 370:	80 91 67 00 	lds	r24, 0x0067
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	21 f4       	brne	.+8      	; 0x380 <ICU_init+0x10>
 378:	8e b5       	in	r24, 0x2e	; 46
 37a:	80 64       	ori	r24, 0x40	; 64
 37c:	8e bd       	out	0x2e, r24	; 46
 37e:	05 c0       	rjmp	.+10     	; 0x38a <ICU_init+0x1a>
else if (trigger == falling) { clrbit(TCCR1B,ICES1);}
 380:	88 23       	and	r24, r24
 382:	19 f4       	brne	.+6      	; 0x38a <ICU_init+0x1a>
 384:	8e b5       	in	r24, 0x2e	; 46
 386:	8f 7b       	andi	r24, 0xBF	; 191
 388:	8e bd       	out	0x2e, r24	; 46
	
	 if (ICU_INT == Enabled)  { setbit(SREG,7);  setbit(TIMSK,TICIE);}
 38a:	80 91 66 00 	lds	r24, 0x0066
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	39 f4       	brne	.+14     	; 0x3a0 <ICU_init+0x30>
 392:	8f b7       	in	r24, 0x3f	; 63
 394:	80 68       	ori	r24, 0x80	; 128
 396:	8f bf       	out	0x3f, r24	; 63
 398:	89 b7       	in	r24, 0x39	; 57
 39a:	80 62       	ori	r24, 0x20	; 32
 39c:	89 bf       	out	0x39, r24	; 57
 39e:	05 c0       	rjmp	.+10     	; 0x3aa <ICU_init+0x3a>
else if (ICU_INT == Disabled) {clrbit(TIMSK,TICIE);}		
 3a0:	88 23       	and	r24, r24
 3a2:	19 f4       	brne	.+6      	; 0x3aa <ICU_init+0x3a>
 3a4:	89 b7       	in	r24, 0x39	; 57
 3a6:	8f 7d       	andi	r24, 0xDF	; 223
 3a8:	89 bf       	out	0x39, r24	; 57

//set timer 1 for normal mode 
 TCCR1A = 0x00; 
 3aa:	1f bc       	out	0x2f, r1	; 47
 //clear registers
 TCNT1H = 0x00;
 3ac:	1d bc       	out	0x2d, r1	; 45
 TCNT1L = 0x00;
 3ae:	1c bc       	out	0x2c, r1	; 44
 ICR1H  = 0x00;
 3b0:	17 bc       	out	0x27, r1	; 39
 ICR1L  = 0x00;
 3b2:	16 bc       	out	0x26, r1	; 38
//prescaler select	  8 MHz 1024
setbit(TCCR1B,CS12); clrbit(TCCR1B,CS11); setbit(TCCR1B,CS10);
 3b4:	8e b5       	in	r24, 0x2e	; 46
 3b6:	84 60       	ori	r24, 0x04	; 4
 3b8:	8e bd       	out	0x2e, r24	; 46
 3ba:	8e b5       	in	r24, 0x2e	; 46
 3bc:	8d 7f       	andi	r24, 0xFD	; 253
 3be:	8e bd       	out	0x2e, r24	; 46
 3c0:	8e b5       	in	r24, 0x2e	; 46
 3c2:	81 60       	ori	r24, 0x01	; 1
 3c4:	8e bd       	out	0x2e, r24	; 46


 3c6:	08 95       	ret

000003c8 <main>:
extern void us_detect (void);

int main () {
	
	
	DIO_SetPinDirection(PIN12,OUTPUT);
 3c8:	8c e0       	ldi	r24, 0x0C	; 12
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	0e 94 24 01 	call	0x248	; 0x248 <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN13,OUTPUT);
 3d0:	8d e0       	ldi	r24, 0x0D	; 13
 3d2:	61 e0       	ldi	r22, 0x01	; 1
 3d4:	0e 94 24 01 	call	0x248	; 0x248 <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN14,OUTPUT);
 3d8:	8e e0       	ldi	r24, 0x0E	; 14
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	0e 94 24 01 	call	0x248	; 0x248 <DIO_SetPinDirection>
	
	DIO_SetPinDirection(PIN16,OUTPUT);
 3e0:	80 e1       	ldi	r24, 0x10	; 16
 3e2:	61 e0       	ldi	r22, 0x01	; 1
 3e4:	0e 94 24 01 	call	0x248	; 0x248 <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN17,OUTPUT);
 3e8:	81 e1       	ldi	r24, 0x11	; 17
 3ea:	61 e0       	ldi	r22, 0x01	; 1
 3ec:	0e 94 24 01 	call	0x248	; 0x248 <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN18,OUTPUT);
 3f0:	82 e1       	ldi	r24, 0x12	; 18
 3f2:	61 e0       	ldi	r22, 0x01	; 1
 3f4:	0e 94 24 01 	call	0x248	; 0x248 <DIO_SetPinDirection>
	uint16 distance ; //in cm
	ultrasonic_init();
 3f8:	0e 94 28 03 	call	0x650	; 0x650 <ultrasonic_init>
	while (1){
		distance = US_measure();
 3fc:	0e 94 33 03 	call	0x666	; 0x666 <US_measure>
		
		if ( distance >40 && distance  < 80) { //slow state 
 400:	9c 01       	movw	r18, r24
 402:	29 52       	subi	r18, 0x29	; 41
 404:	30 40       	sbci	r19, 0x00	; 0
 406:	27 32       	cpi	r18, 0x27	; 39
 408:	31 05       	cpc	r19, r1
 40a:	c8 f4       	brcc	.+50     	; 0x43e <main+0x76>
			
			DIO_WritePin(PIN16,LOW);DIO_WritePin(PIN17,HIGH);DIO_WritePin(PIN18,LOW);
 40c:	80 e1       	ldi	r24, 0x10	; 16
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 414:	81 e1       	ldi	r24, 0x11	; 17
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 41c:	82 e1       	ldi	r24, 0x12	; 18
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(PIN12,LOW);DIO_WritePin(PIN13,HIGH);DIO_WritePin(PIN14,LOW);
 424:	8c e0       	ldi	r24, 0x0C	; 12
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 42c:	8d e0       	ldi	r24, 0x0D	; 13
 42e:	61 e0       	ldi	r22, 0x01	; 1
 430:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 434:	8e e0       	ldi	r24, 0x0E	; 14
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 43c:	df cf       	rjmp	.-66     	; 0x3fc <main+0x34>
			
		}
		else if ( distance  < 40) //stop state 
 43e:	88 32       	cpi	r24, 0x28	; 40
 440:	91 05       	cpc	r25, r1
 442:	c8 f4       	brcc	.+50     	; 0x476 <main+0xae>
		{
			
			DIO_WritePin(PIN16,LOW);DIO_WritePin(PIN17,LOW);DIO_WritePin(PIN18,HIGH);
 444:	80 e1       	ldi	r24, 0x10	; 16
 446:	60 e0       	ldi	r22, 0x00	; 0
 448:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 44c:	81 e1       	ldi	r24, 0x11	; 17
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 454:	82 e1       	ldi	r24, 0x12	; 18
 456:	61 e0       	ldi	r22, 0x01	; 1
 458:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(PIN12,LOW);DIO_WritePin(PIN13,LOW);DIO_WritePin(PIN14,HIGH);
 45c:	8c e0       	ldi	r24, 0x0C	; 12
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 464:	8d e0       	ldi	r24, 0x0D	; 13
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 46c:	8e e0       	ldi	r24, 0x0E	; 14
 46e:	61 e0       	ldi	r22, 0x01	; 1
 470:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 474:	c3 cf       	rjmp	.-122    	; 0x3fc <main+0x34>
		} 
		else  //normal state
		{
			
			DIO_WritePin(PIN16,HIGH);DIO_WritePin(PIN17,LOW);DIO_WritePin(PIN18,LOW);
 476:	80 e1       	ldi	r24, 0x10	; 16
 478:	61 e0       	ldi	r22, 0x01	; 1
 47a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 47e:	81 e1       	ldi	r24, 0x11	; 17
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 486:	82 e1       	ldi	r24, 0x12	; 18
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(PIN12,HIGH);DIO_WritePin(PIN13,LOW);DIO_WritePin(PIN14,LOW);
 48e:	8c e0       	ldi	r24, 0x0C	; 12
 490:	61 e0       	ldi	r22, 0x01	; 1
 492:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 496:	8d e0       	ldi	r24, 0x0D	; 13
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 49e:	8e e0       	ldi	r24, 0x0E	; 14
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 4a6:	aa cf       	rjmp	.-172    	; 0x3fc <main+0x34>

000004a8 <timer0_init>:

#include "Timer.h"
extern struct cnfg_type timer_cnfg;

void timer0_init(void){
	OCR0  = 0x00;
 4a8:	1c be       	out	0x3c, r1	; 60
	TCCR0 = 0x00;
 4aa:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00; 
 4ac:	12 be       	out	0x32, r1	; 50
	
	if (timer_cnfg.mode== Normal_mode){	
 4ae:	80 91 60 00 	lds	r24, 0x0060
 4b2:	88 23       	and	r24, r24
 4b4:	69 f4       	brne	.+26     	; 0x4d0 <timer0_init+0x28>
		clrbit(TCCR0,WGM00); clrbit(TCCR0,WGM01); clrbit(TCCR0,COM00); clrbit(TCCR0,COM01);		
 4b6:	83 b7       	in	r24, 0x33	; 51
 4b8:	8f 7b       	andi	r24, 0xBF	; 191
 4ba:	83 bf       	out	0x33, r24	; 51
 4bc:	83 b7       	in	r24, 0x33	; 51
 4be:	8f 7d       	andi	r24, 0xDF	; 223
 4c0:	83 bf       	out	0x33, r24	; 51
 4c2:	83 b7       	in	r24, 0x33	; 51
 4c4:	87 7f       	andi	r24, 0xF7	; 247
 4c6:	83 bf       	out	0x33, r24	; 51
 4c8:	83 b7       	in	r24, 0x33	; 51
 4ca:	8f 7e       	andi	r24, 0xEF	; 239
 4cc:	83 bf       	out	0x33, r24	; 51
 4ce:	2c c0       	rjmp	.+88     	; 0x528 <timer0_init+0x80>
	}
	else if (timer_cnfg.mode== PWM_PhaseCorrect) {
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	69 f4       	brne	.+26     	; 0x4ee <timer0_init+0x46>
		setbit(TCCR0,WGM00); clrbit(TCCR0,WGM01); setbit(TCCR0,COM00); setbit(TCCR0,COM01);
 4d4:	83 b7       	in	r24, 0x33	; 51
 4d6:	80 64       	ori	r24, 0x40	; 64
 4d8:	83 bf       	out	0x33, r24	; 51
 4da:	83 b7       	in	r24, 0x33	; 51
 4dc:	8f 7d       	andi	r24, 0xDF	; 223
 4de:	83 bf       	out	0x33, r24	; 51
 4e0:	83 b7       	in	r24, 0x33	; 51
 4e2:	88 60       	ori	r24, 0x08	; 8
 4e4:	83 bf       	out	0x33, r24	; 51
 4e6:	83 b7       	in	r24, 0x33	; 51
 4e8:	80 61       	ori	r24, 0x10	; 16
 4ea:	83 bf       	out	0x33, r24	; 51
 4ec:	1d c0       	rjmp	.+58     	; 0x528 <timer0_init+0x80>
	}
	else if (timer_cnfg.mode== CTC) {
 4ee:	82 30       	cpi	r24, 0x02	; 2
 4f0:	69 f4       	brne	.+26     	; 0x50c <timer0_init+0x64>
		clrbit(TCCR0,WGM00); setbit(TCCR0,WGM01); setbit(TCCR0,COM00); clrbit(TCCR0,COM01);
 4f2:	83 b7       	in	r24, 0x33	; 51
 4f4:	8f 7b       	andi	r24, 0xBF	; 191
 4f6:	83 bf       	out	0x33, r24	; 51
 4f8:	83 b7       	in	r24, 0x33	; 51
 4fa:	80 62       	ori	r24, 0x20	; 32
 4fc:	83 bf       	out	0x33, r24	; 51
 4fe:	83 b7       	in	r24, 0x33	; 51
 500:	88 60       	ori	r24, 0x08	; 8
 502:	83 bf       	out	0x33, r24	; 51
 504:	83 b7       	in	r24, 0x33	; 51
 506:	8f 7e       	andi	r24, 0xEF	; 239
 508:	83 bf       	out	0x33, r24	; 51
 50a:	0e c0       	rjmp	.+28     	; 0x528 <timer0_init+0x80>
	}
	else if (timer_cnfg.mode== Fast_PWM) {
 50c:	83 30       	cpi	r24, 0x03	; 3
 50e:	61 f4       	brne	.+24     	; 0x528 <timer0_init+0x80>
        setbit(TCCR0,WGM00); setbit(TCCR0,WGM01); setbit(TCCR0,COM00); setbit(TCCR0,COM01);			
 510:	83 b7       	in	r24, 0x33	; 51
 512:	80 64       	ori	r24, 0x40	; 64
 514:	83 bf       	out	0x33, r24	; 51
 516:	83 b7       	in	r24, 0x33	; 51
 518:	80 62       	ori	r24, 0x20	; 32
 51a:	83 bf       	out	0x33, r24	; 51
 51c:	83 b7       	in	r24, 0x33	; 51
 51e:	88 60       	ori	r24, 0x08	; 8
 520:	83 bf       	out	0x33, r24	; 51
 522:	83 b7       	in	r24, 0x33	; 51
 524:	80 61       	ori	r24, 0x10	; 16
 526:	83 bf       	out	0x33, r24	; 51
	}
	
     if (timer_cnfg.prescaler== no_prescaler ) {setbit(TCCR0,CS00); clrbit(TCCR0,CS01); clrbit(TCCR0,CS02);}
 528:	80 91 61 00 	lds	r24, 0x0061
 52c:	90 91 62 00 	lds	r25, 0x0062
 530:	00 97       	sbiw	r24, 0x00	; 0
 532:	51 f4       	brne	.+20     	; 0x548 <timer0_init+0xa0>
 534:	83 b7       	in	r24, 0x33	; 51
 536:	81 60       	ori	r24, 0x01	; 1
 538:	83 bf       	out	0x33, r24	; 51
 53a:	83 b7       	in	r24, 0x33	; 51
 53c:	8d 7f       	andi	r24, 0xFD	; 253
 53e:	83 bf       	out	0x33, r24	; 51
 540:	83 b7       	in	r24, 0x33	; 51
 542:	8b 7f       	andi	r24, 0xFB	; 251
 544:	83 bf       	out	0x33, r24	; 51
 546:	4f c0       	rjmp	.+158    	; 0x5e6 <timer0_init+0x13e>
else if (timer_cnfg.prescaler== 8 )    {clrbit(TCCR0,CS00); setbit(TCCR0,CS01); clrbit(TCCR0,CS02);}
 548:	88 30       	cpi	r24, 0x08	; 8
 54a:	91 05       	cpc	r25, r1
 54c:	51 f4       	brne	.+20     	; 0x562 <timer0_init+0xba>
 54e:	83 b7       	in	r24, 0x33	; 51
 550:	8e 7f       	andi	r24, 0xFE	; 254
 552:	83 bf       	out	0x33, r24	; 51
 554:	83 b7       	in	r24, 0x33	; 51
 556:	82 60       	ori	r24, 0x02	; 2
 558:	83 bf       	out	0x33, r24	; 51
 55a:	83 b7       	in	r24, 0x33	; 51
 55c:	8b 7f       	andi	r24, 0xFB	; 251
 55e:	83 bf       	out	0x33, r24	; 51
 560:	42 c0       	rjmp	.+132    	; 0x5e6 <timer0_init+0x13e>
else if (timer_cnfg.prescaler== 64 )   {setbit(TCCR0,CS00); setbit(TCCR0,CS01); clrbit(TCCR0,CS02);}
 562:	80 34       	cpi	r24, 0x40	; 64
 564:	91 05       	cpc	r25, r1
 566:	51 f4       	brne	.+20     	; 0x57c <timer0_init+0xd4>
 568:	83 b7       	in	r24, 0x33	; 51
 56a:	81 60       	ori	r24, 0x01	; 1
 56c:	83 bf       	out	0x33, r24	; 51
 56e:	83 b7       	in	r24, 0x33	; 51
 570:	82 60       	ori	r24, 0x02	; 2
 572:	83 bf       	out	0x33, r24	; 51
 574:	83 b7       	in	r24, 0x33	; 51
 576:	8b 7f       	andi	r24, 0xFB	; 251
 578:	83 bf       	out	0x33, r24	; 51
 57a:	35 c0       	rjmp	.+106    	; 0x5e6 <timer0_init+0x13e>
else if (timer_cnfg.prescaler== 256 )  {clrbit(TCCR0,CS00); clrbit(TCCR0,CS01); setbit(TCCR0,CS02);}
 57c:	21 e0       	ldi	r18, 0x01	; 1
 57e:	80 30       	cpi	r24, 0x00	; 0
 580:	92 07       	cpc	r25, r18
 582:	51 f4       	brne	.+20     	; 0x598 <timer0_init+0xf0>
 584:	83 b7       	in	r24, 0x33	; 51
 586:	8e 7f       	andi	r24, 0xFE	; 254
 588:	83 bf       	out	0x33, r24	; 51
 58a:	83 b7       	in	r24, 0x33	; 51
 58c:	8d 7f       	andi	r24, 0xFD	; 253
 58e:	83 bf       	out	0x33, r24	; 51
 590:	83 b7       	in	r24, 0x33	; 51
 592:	84 60       	ori	r24, 0x04	; 4
 594:	83 bf       	out	0x33, r24	; 51
 596:	27 c0       	rjmp	.+78     	; 0x5e6 <timer0_init+0x13e>
else if (timer_cnfg.prescaler== 1024 ) {setbit(TCCR0,CS00); clrbit(TCCR0,CS01); setbit(TCCR0,CS02);}
 598:	24 e0       	ldi	r18, 0x04	; 4
 59a:	80 30       	cpi	r24, 0x00	; 0
 59c:	92 07       	cpc	r25, r18
 59e:	51 f4       	brne	.+20     	; 0x5b4 <timer0_init+0x10c>
 5a0:	83 b7       	in	r24, 0x33	; 51
 5a2:	81 60       	ori	r24, 0x01	; 1
 5a4:	83 bf       	out	0x33, r24	; 51
 5a6:	83 b7       	in	r24, 0x33	; 51
 5a8:	8d 7f       	andi	r24, 0xFD	; 253
 5aa:	83 bf       	out	0x33, r24	; 51
 5ac:	83 b7       	in	r24, 0x33	; 51
 5ae:	84 60       	ori	r24, 0x04	; 4
 5b0:	83 bf       	out	0x33, r24	; 51
 5b2:	19 c0       	rjmp	.+50     	; 0x5e6 <timer0_init+0x13e>
else if (timer_cnfg.prescaler== XFE )  {clrbit(TCCR0,CS00); setbit(TCCR0,CS01); setbit(TCCR0,CS02);}
 5b4:	82 30       	cpi	r24, 0x02	; 2
 5b6:	91 05       	cpc	r25, r1
 5b8:	51 f4       	brne	.+20     	; 0x5ce <timer0_init+0x126>
 5ba:	83 b7       	in	r24, 0x33	; 51
 5bc:	8e 7f       	andi	r24, 0xFE	; 254
 5be:	83 bf       	out	0x33, r24	; 51
 5c0:	83 b7       	in	r24, 0x33	; 51
 5c2:	82 60       	ori	r24, 0x02	; 2
 5c4:	83 bf       	out	0x33, r24	; 51
 5c6:	83 b7       	in	r24, 0x33	; 51
 5c8:	84 60       	ori	r24, 0x04	; 4
 5ca:	83 bf       	out	0x33, r24	; 51
 5cc:	0c c0       	rjmp	.+24     	; 0x5e6 <timer0_init+0x13e>
else if (timer_cnfg.prescaler== XRE )  {setbit(TCCR0,CS00); setbit(TCCR0,CS01); setbit(TCCR0,CS02);}
 5ce:	83 30       	cpi	r24, 0x03	; 3
 5d0:	91 05       	cpc	r25, r1
 5d2:	49 f4       	brne	.+18     	; 0x5e6 <timer0_init+0x13e>
 5d4:	83 b7       	in	r24, 0x33	; 51
 5d6:	81 60       	ori	r24, 0x01	; 1
 5d8:	83 bf       	out	0x33, r24	; 51
 5da:	83 b7       	in	r24, 0x33	; 51
 5dc:	82 60       	ori	r24, 0x02	; 2
 5de:	83 bf       	out	0x33, r24	; 51
 5e0:	83 b7       	in	r24, 0x33	; 51
 5e2:	84 60       	ori	r24, 0x04	; 4
 5e4:	83 bf       	out	0x33, r24	; 51
	
	

	if      (timer_cnfg.CMI==Enabled)  { setbit(TIMSK,OCIE0); }
 5e6:	80 91 63 00 	lds	r24, 0x0063
 5ea:	81 30       	cpi	r24, 0x01	; 1
 5ec:	21 f4       	brne	.+8      	; 0x5f6 <timer0_init+0x14e>
 5ee:	89 b7       	in	r24, 0x39	; 57
 5f0:	82 60       	ori	r24, 0x02	; 2
 5f2:	89 bf       	out	0x39, r24	; 57
 5f4:	05 c0       	rjmp	.+10     	; 0x600 <timer0_init+0x158>
	else if (timer_cnfg.CMI==Disabled) { clrbit(TIMSK,OCIE0); }
 5f6:	88 23       	and	r24, r24
 5f8:	19 f4       	brne	.+6      	; 0x600 <timer0_init+0x158>
 5fa:	89 b7       	in	r24, 0x39	; 57
 5fc:	8d 7f       	andi	r24, 0xFD	; 253
 5fe:	89 bf       	out	0x39, r24	; 57
		
    if      (timer_cnfg.OVI==Enabled)  { setbit(TIMSK,TOIE0); }
 600:	80 91 64 00 	lds	r24, 0x0064
 604:	81 30       	cpi	r24, 0x01	; 1
 606:	21 f4       	brne	.+8      	; 0x610 <timer0_init+0x168>
 608:	89 b7       	in	r24, 0x39	; 57
 60a:	81 60       	ori	r24, 0x01	; 1
 60c:	89 bf       	out	0x39, r24	; 57
 60e:	08 95       	ret
	else if (timer_cnfg.OVI==Disabled) { clrbit(TIMSK,TOIE0); }
 610:	88 23       	and	r24, r24
 612:	19 f4       	brne	.+6      	; 0x61a <timer0_init+0x172>
 614:	89 b7       	in	r24, 0x39	; 57
 616:	8e 7f       	andi	r24, 0xFE	; 254
 618:	89 bf       	out	0x39, r24	; 57
 61a:	08 95       	ret

0000061c <timer1_init>:
}


void timer1_init(void){
	//clear all registers
	TCCR1A = 0x00;
 61c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x00;
 61e:	1e bc       	out	0x2e, r1	; 46
	TCNT1H = 0x00;
 620:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0x00;
 622:	1c bc       	out	0x2c, r1	; 44
	OCR1AH = 0x00;
 624:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = 0x00;
 626:	1a bc       	out	0x2a, r1	; 42
	OCR1BH = 0x00;
 628:	19 bc       	out	0x29, r1	; 41
	OCR1BL = 0x00;
 62a:	18 bc       	out	0x28, r1	; 40
	ICR1H  = 0x00;
 62c:	17 bc       	out	0x27, r1	; 39
	ICR1L  = 0x00;
 62e:	16 bc       	out	0x26, r1	; 38
		setbit(TCCR0,WGM00); setbit(TCCR0,WGM01); setbit(TCCR0,COM00); setbit(TCCR0,COM01);
	}
	*/


}
 630:	08 95       	ret

00000632 <timer_delay>:

void timer_delay(uint32 n){
	TCNT0 = 0;
 632:	12 be       	out	0x32, r1	; 50
	OCR0 = 125;
 634:	2d e7       	ldi	r18, 0x7D	; 125
 636:	2c bf       	out	0x3c, r18	; 60
	while (n != 0)
 638:	00 97       	sbiw	r24, 0x00	; 0
 63a:	49 f0       	breq	.+18     	; 0x64e <timer_delay+0x1c>
	{
      while ((getbit(TIFR,OCF0)) != 1 );
 63c:	28 b7       	in	r18, 0x38	; 56
 63e:	21 ff       	sbrs	r18, 1
 640:	fd cf       	rjmp	.-6      	; 0x63c <timer_delay+0xa>
	  n--;
 642:	01 97       	sbiw	r24, 0x01	; 1
	  setbit(TIFR,OCF0);		
 644:	28 b7       	in	r18, 0x38	; 56
 646:	22 60       	ori	r18, 0x02	; 2
 648:	28 bf       	out	0x38, r18	; 56
}

void timer_delay(uint32 n){
	TCNT0 = 0;
	OCR0 = 125;
	while (n != 0)
 64a:	00 97       	sbiw	r24, 0x00	; 0
 64c:	b9 f7       	brne	.-18     	; 0x63c <timer_delay+0xa>
 64e:	08 95       	ret

00000650 <ultrasonic_init>:

#define echo PIN30
#define trig PIN8

void ultrasonic_init (void) {
	ICU_init();
 650:	0e 94 b8 01 	call	0x370	; 0x370 <ICU_init>
	DIO_SetPinDirection(trig,OUTPUT);
 654:	88 e0       	ldi	r24, 0x08	; 8
 656:	61 e0       	ldi	r22, 0x01	; 1
 658:	0e 94 24 01 	call	0x248	; 0x248 <DIO_SetPinDirection>
	DIO_SetPinDirection(echo,INPUT);
 65c:	8e e1       	ldi	r24, 0x1E	; 30
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	0e 94 24 01 	call	0x248	; 0x248 <DIO_SetPinDirection>
}
 664:	08 95       	ret

00000666 <US_measure>:

uint16 US_measure(void){
 666:	0f 93       	push	r16
 668:	1f 93       	push	r17
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
	uint16 start=0 , end=0,distance=0,flag = 0;
	f16 time ;
	DIO_WritePin(trig,HIGH);
 66e:	88 e0       	ldi	r24, 0x08	; 8
 670:	61 e0       	ldi	r22, 0x01	; 1
 672:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	TCNT1H = 0x00;
 676:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0x00;
 678:	1c bc       	out	0x2c, r1	; 44
	ICR1H =0x00;
 67a:	17 bc       	out	0x27, r1	; 39
	ICR1L =0x00;
 67c:	16 bc       	out	0x26, r1	; 38
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 67e:	83 e0       	ldi	r24, 0x03	; 3
 680:	8a 95       	dec	r24
 682:	f1 f7       	brne	.-4      	; 0x680 <US_measure+0x1a>
 684:	00 00       	nop
	_delay_us(10);
	DIO_WritePin(trig,LOW);
 686:	88 e0       	ldi	r24, 0x08	; 8
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	
	setbit(TCCR1B,ICES1);
 68e:	8e b5       	in	r24, 0x2e	; 46
 690:	80 64       	ori	r24, 0x40	; 64
 692:	8e bd       	out	0x2e, r24	; 46
	
	while (flag ==0 ){
		
		 
		setbit(TCCR1B,ICES1);
 694:	8e b5       	in	r24, 0x2e	; 46
 696:	80 64       	ori	r24, 0x40	; 64
 698:	8e bd       	out	0x2e, r24	; 46
		if (getbit(TIFR,ICF1)) {
 69a:	88 b7       	in	r24, 0x38	; 56
 69c:	85 ff       	sbrs	r24, 5
 69e:	fa cf       	rjmp	.-12     	; 0x694 <US_measure+0x2e>
			flag ++ ;
			start = (ICR1L|(ICR1H<<8) );
 6a0:	c6 b5       	in	r28, 0x26	; 38
 6a2:	27 b5       	in	r18, 0x27	; 39
 6a4:	92 2f       	mov	r25, r18
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	d0 e0       	ldi	r29, 0x00	; 0
 6aa:	c8 2b       	or	r28, r24
 6ac:	d9 2b       	or	r29, r25
			setbit(TIFR,ICF1);
 6ae:	88 b7       	in	r24, 0x38	; 56
 6b0:	80 62       	ori	r24, 0x20	; 32
 6b2:	88 bf       	out	0x38, r24	; 56
			}	
		while (flag==1){
			clrbit(TCCR1B,ICES1);
 6b4:	8e b5       	in	r24, 0x2e	; 46
 6b6:	8f 7b       	andi	r24, 0xBF	; 191
 6b8:	8e bd       	out	0x2e, r24	; 46
			if (getbit(TIFR,ICF1)) {
 6ba:	88 b7       	in	r24, 0x38	; 56
 6bc:	85 fd       	sbrc	r24, 5
 6be:	06 c0       	rjmp	.+12     	; 0x6cc <US_measure+0x66>
			flag ++ ;
			start = (ICR1L|(ICR1H<<8) );
			setbit(TIFR,ICF1);
			}	
		while (flag==1){
			clrbit(TCCR1B,ICES1);
 6c0:	8e b5       	in	r24, 0x2e	; 46
 6c2:	8f 7b       	andi	r24, 0xBF	; 191
 6c4:	8e bd       	out	0x2e, r24	; 46
			if (getbit(TIFR,ICF1)) {
 6c6:	88 b7       	in	r24, 0x38	; 56
 6c8:	85 ff       	sbrs	r24, 5
 6ca:	fa cf       	rjmp	.-12     	; 0x6c0 <US_measure+0x5a>
				flag ++ ;
				end = (ICR1L|(ICR1H<<8) );
 6cc:	06 b5       	in	r16, 0x26	; 38
 6ce:	17 b5       	in	r17, 0x27	; 39
				setbit(TIFR,ICF1);
 6d0:	88 b7       	in	r24, 0x38	; 56
 6d2:	80 62       	ori	r24, 0x20	; 32
 6d4:	88 bf       	out	0x38, r24	; 56
				DIO_WritePin(PIN14,LOW);
 6d6:	8e e0       	ldi	r24, 0x0E	; 14
 6d8:	60 e0       	ldi	r22, 0x00	; 0
 6da:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
				DIO_WritePin(PIN13,HIGH);
 6de:	8d e0       	ldi	r24, 0x0D	; 13
 6e0:	61 e0       	ldi	r22, 0x01	; 1
 6e2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	
     if (flag ==2 ){
	     time = (end-start) *0.000128 ; //in seconds 
		 distance = 34300*time/2 ;
	     flag = 0;
	     TCNT1H = 0x00;
 6e6:	1d bc       	out	0x2d, r1	; 45
	     TCNT1L = 0x00;
 6e8:	1c bc       	out	0x2c, r1	; 44
	     ICR1H  = 0x00;
 6ea:	17 bc       	out	0x27, r1	; 39
	     ICR1L  = 0x00;	 
 6ec:	16 bc       	out	0x26, r1	; 38
			}	
		while (flag==1){
			clrbit(TCCR1B,ICES1);
			if (getbit(TIFR,ICF1)) {
				flag ++ ;
				end = (ICR1L|(ICR1H<<8) );
 6ee:	91 2f       	mov	r25, r17
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	10 e0       	ldi	r17, 0x00	; 0
 6f4:	80 2b       	or	r24, r16
 6f6:	91 2b       	or	r25, r17
			}
		}
	}
	
     if (flag ==2 ){
	     time = (end-start) *0.000128 ; //in seconds 
 6f8:	8c 1b       	sub	r24, r28
 6fa:	9d 0b       	sbc	r25, r29
 6fc:	bc 01       	movw	r22, r24
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__floatunsisf>
 706:	2d eb       	ldi	r18, 0xBD	; 189
 708:	37 e3       	ldi	r19, 0x37	; 55
 70a:	46 e0       	ldi	r20, 0x06	; 6
 70c:	59 e3       	ldi	r21, 0x39	; 57
 70e:	0e 94 4f 04 	call	0x89e	; 0x89e <__mulsf3>
		 distance = 34300*time/2 ;
 712:	20 e0       	ldi	r18, 0x00	; 0
 714:	3c ef       	ldi	r19, 0xFC	; 252
 716:	45 e0       	ldi	r20, 0x05	; 5
 718:	57 e4       	ldi	r21, 0x47	; 71
 71a:	0e 94 4f 04 	call	0x89e	; 0x89e <__mulsf3>
 71e:	20 e0       	ldi	r18, 0x00	; 0
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	40 e0       	ldi	r20, 0x00	; 0
 724:	5f e3       	ldi	r21, 0x3F	; 63
 726:	0e 94 4f 04 	call	0x89e	; 0x89e <__mulsf3>
 72a:	0e 94 bd 03 	call	0x77a	; 0x77a <__fixunssfsi>
	     TCNT1L = 0x00;
	     ICR1H  = 0x00;
	     ICR1L  = 0x00;	 
     }
	return distance ; //in cm
} 
 72e:	86 2f       	mov	r24, r22
 730:	97 2f       	mov	r25, r23
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	1f 91       	pop	r17
 738:	0f 91       	pop	r16
 73a:	08 95       	ret

0000073c <us_detect>:

void us_detect (void)
{
uint16 start=0 , end=0,time=0,distance=0,flag = 0;

DIO_WritePin(trig,HIGH);
 73c:	88 e0       	ldi	r24, 0x08	; 8
 73e:	61 e0       	ldi	r22, 0x01	; 1
 740:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 744:	83 e0       	ldi	r24, 0x03	; 3
 746:	8a 95       	dec	r24
 748:	f1 f7       	brne	.-4      	; 0x746 <us_detect+0xa>
 74a:	00 00       	nop
_delay_us(10);
DIO_WritePin(trig,LOW);
 74c:	88 e0       	ldi	r24, 0x08	; 8
 74e:	60 e0       	ldi	r22, 0x00	; 0
 750:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>

//while (flag ==0 ){ 
	if (getbit(TIFR,ICF1)) { 
 754:	88 b7       	in	r24, 0x38	; 56
 756:	82 95       	swap	r24
 758:	86 95       	lsr	r24
 75a:	87 70       	andi	r24, 0x07	; 7
 75c:	80 ff       	sbrs	r24, 0
 75e:	08 c0       	rjmp	.+16     	; 0x770 <us_detect+0x34>
		//DIO_WritePin(PIN14,HIGH);
		//flag =2 ;
		//start = (ICR1L|(ICR1H<<8) );
		setbit(TIFR,ICF1);
 760:	88 b7       	in	r24, 0x38	; 56
 762:	80 62       	ori	r24, 0x20	; 32
 764:	88 bf       	out	0x38, r24	; 56
		DIO_WritePin(PIN12,HIGH);
 766:	8c e0       	ldi	r24, 0x0C	; 12
 768:	61 e0       	ldi	r22, 0x01	; 1
 76a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 76e:	08 95       	ret
		//timer_delay(100);
		//DIO_WritePin(PIN14,LOW);
		
	//}	
}
else {DIO_WritePin(PIN12,LOW);}
 770:	8c e0       	ldi	r24, 0x0C	; 12
 772:	60 e0       	ldi	r22, 0x00	; 0
 774:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 778:	08 95       	ret

0000077a <__fixunssfsi>:
 77a:	70 d0       	rcall	.+224    	; 0x85c <__fp_splitA>
 77c:	88 f0       	brcs	.+34     	; 0x7a0 <__fixunssfsi+0x26>
 77e:	9f 57       	subi	r25, 0x7F	; 127
 780:	90 f0       	brcs	.+36     	; 0x7a6 <__fixunssfsi+0x2c>
 782:	b9 2f       	mov	r27, r25
 784:	99 27       	eor	r25, r25
 786:	b7 51       	subi	r27, 0x17	; 23
 788:	a0 f0       	brcs	.+40     	; 0x7b2 <__fixunssfsi+0x38>
 78a:	d1 f0       	breq	.+52     	; 0x7c0 <__fixunssfsi+0x46>
 78c:	66 0f       	add	r22, r22
 78e:	77 1f       	adc	r23, r23
 790:	88 1f       	adc	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	1a f0       	brmi	.+6      	; 0x79c <__fixunssfsi+0x22>
 796:	ba 95       	dec	r27
 798:	c9 f7       	brne	.-14     	; 0x78c <__fixunssfsi+0x12>
 79a:	12 c0       	rjmp	.+36     	; 0x7c0 <__fixunssfsi+0x46>
 79c:	b1 30       	cpi	r27, 0x01	; 1
 79e:	81 f0       	breq	.+32     	; 0x7c0 <__fixunssfsi+0x46>
 7a0:	77 d0       	rcall	.+238    	; 0x890 <__fp_zero>
 7a2:	b1 e0       	ldi	r27, 0x01	; 1
 7a4:	08 95       	ret
 7a6:	74 c0       	rjmp	.+232    	; 0x890 <__fp_zero>
 7a8:	67 2f       	mov	r22, r23
 7aa:	78 2f       	mov	r23, r24
 7ac:	88 27       	eor	r24, r24
 7ae:	b8 5f       	subi	r27, 0xF8	; 248
 7b0:	39 f0       	breq	.+14     	; 0x7c0 <__fixunssfsi+0x46>
 7b2:	b9 3f       	cpi	r27, 0xF9	; 249
 7b4:	cc f3       	brlt	.-14     	; 0x7a8 <__fixunssfsi+0x2e>
 7b6:	86 95       	lsr	r24
 7b8:	77 95       	ror	r23
 7ba:	67 95       	ror	r22
 7bc:	b3 95       	inc	r27
 7be:	d9 f7       	brne	.-10     	; 0x7b6 <__fixunssfsi+0x3c>
 7c0:	3e f4       	brtc	.+14     	; 0x7d0 <__fixunssfsi+0x56>
 7c2:	90 95       	com	r25
 7c4:	80 95       	com	r24
 7c6:	70 95       	com	r23
 7c8:	61 95       	neg	r22
 7ca:	7f 4f       	sbci	r23, 0xFF	; 255
 7cc:	8f 4f       	sbci	r24, 0xFF	; 255
 7ce:	9f 4f       	sbci	r25, 0xFF	; 255
 7d0:	08 95       	ret

000007d2 <__floatunsisf>:
 7d2:	e8 94       	clt
 7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <__floatsisf+0x12>

000007d6 <__floatsisf>:
 7d6:	97 fb       	bst	r25, 7
 7d8:	3e f4       	brtc	.+14     	; 0x7e8 <__floatsisf+0x12>
 7da:	90 95       	com	r25
 7dc:	80 95       	com	r24
 7de:	70 95       	com	r23
 7e0:	61 95       	neg	r22
 7e2:	7f 4f       	sbci	r23, 0xFF	; 255
 7e4:	8f 4f       	sbci	r24, 0xFF	; 255
 7e6:	9f 4f       	sbci	r25, 0xFF	; 255
 7e8:	99 23       	and	r25, r25
 7ea:	a9 f0       	breq	.+42     	; 0x816 <__floatsisf+0x40>
 7ec:	f9 2f       	mov	r31, r25
 7ee:	96 e9       	ldi	r25, 0x96	; 150
 7f0:	bb 27       	eor	r27, r27
 7f2:	93 95       	inc	r25
 7f4:	f6 95       	lsr	r31
 7f6:	87 95       	ror	r24
 7f8:	77 95       	ror	r23
 7fa:	67 95       	ror	r22
 7fc:	b7 95       	ror	r27
 7fe:	f1 11       	cpse	r31, r1
 800:	f8 cf       	rjmp	.-16     	; 0x7f2 <__floatsisf+0x1c>
 802:	fa f4       	brpl	.+62     	; 0x842 <__floatsisf+0x6c>
 804:	bb 0f       	add	r27, r27
 806:	11 f4       	brne	.+4      	; 0x80c <__floatsisf+0x36>
 808:	60 ff       	sbrs	r22, 0
 80a:	1b c0       	rjmp	.+54     	; 0x842 <__floatsisf+0x6c>
 80c:	6f 5f       	subi	r22, 0xFF	; 255
 80e:	7f 4f       	sbci	r23, 0xFF	; 255
 810:	8f 4f       	sbci	r24, 0xFF	; 255
 812:	9f 4f       	sbci	r25, 0xFF	; 255
 814:	16 c0       	rjmp	.+44     	; 0x842 <__floatsisf+0x6c>
 816:	88 23       	and	r24, r24
 818:	11 f0       	breq	.+4      	; 0x81e <__floatsisf+0x48>
 81a:	96 e9       	ldi	r25, 0x96	; 150
 81c:	11 c0       	rjmp	.+34     	; 0x840 <__floatsisf+0x6a>
 81e:	77 23       	and	r23, r23
 820:	21 f0       	breq	.+8      	; 0x82a <__floatsisf+0x54>
 822:	9e e8       	ldi	r25, 0x8E	; 142
 824:	87 2f       	mov	r24, r23
 826:	76 2f       	mov	r23, r22
 828:	05 c0       	rjmp	.+10     	; 0x834 <__floatsisf+0x5e>
 82a:	66 23       	and	r22, r22
 82c:	71 f0       	breq	.+28     	; 0x84a <__floatsisf+0x74>
 82e:	96 e8       	ldi	r25, 0x86	; 134
 830:	86 2f       	mov	r24, r22
 832:	70 e0       	ldi	r23, 0x00	; 0
 834:	60 e0       	ldi	r22, 0x00	; 0
 836:	2a f0       	brmi	.+10     	; 0x842 <__floatsisf+0x6c>
 838:	9a 95       	dec	r25
 83a:	66 0f       	add	r22, r22
 83c:	77 1f       	adc	r23, r23
 83e:	88 1f       	adc	r24, r24
 840:	da f7       	brpl	.-10     	; 0x838 <__floatsisf+0x62>
 842:	88 0f       	add	r24, r24
 844:	96 95       	lsr	r25
 846:	87 95       	ror	r24
 848:	97 f9       	bld	r25, 7
 84a:	08 95       	ret

0000084c <__fp_split3>:
 84c:	57 fd       	sbrc	r21, 7
 84e:	90 58       	subi	r25, 0x80	; 128
 850:	44 0f       	add	r20, r20
 852:	55 1f       	adc	r21, r21
 854:	59 f0       	breq	.+22     	; 0x86c <__stack+0xd>
 856:	5f 3f       	cpi	r21, 0xFF	; 255
 858:	71 f0       	breq	.+28     	; 0x876 <__stack+0x17>
 85a:	47 95       	ror	r20

0000085c <__fp_splitA>:
 85c:	88 0f       	add	r24, r24
 85e:	97 fb       	bst	r25, 7
 860:	99 1f       	adc	r25, r25
 862:	61 f0       	breq	.+24     	; 0x87c <__stack+0x1d>
 864:	9f 3f       	cpi	r25, 0xFF	; 255
 866:	79 f0       	breq	.+30     	; 0x886 <__stack+0x27>
 868:	87 95       	ror	r24
 86a:	08 95       	ret
 86c:	12 16       	cp	r1, r18
 86e:	13 06       	cpc	r1, r19
 870:	14 06       	cpc	r1, r20
 872:	55 1f       	adc	r21, r21
 874:	f2 cf       	rjmp	.-28     	; 0x85a <__fp_split3+0xe>
 876:	46 95       	lsr	r20
 878:	f1 df       	rcall	.-30     	; 0x85c <__fp_splitA>
 87a:	08 c0       	rjmp	.+16     	; 0x88c <__stack+0x2d>
 87c:	16 16       	cp	r1, r22
 87e:	17 06       	cpc	r1, r23
 880:	18 06       	cpc	r1, r24
 882:	99 1f       	adc	r25, r25
 884:	f1 cf       	rjmp	.-30     	; 0x868 <__stack+0x9>
 886:	86 95       	lsr	r24
 888:	71 05       	cpc	r23, r1
 88a:	61 05       	cpc	r22, r1
 88c:	08 94       	sec
 88e:	08 95       	ret

00000890 <__fp_zero>:
 890:	e8 94       	clt

00000892 <__fp_szero>:
 892:	bb 27       	eor	r27, r27
 894:	66 27       	eor	r22, r22
 896:	77 27       	eor	r23, r23
 898:	cb 01       	movw	r24, r22
 89a:	97 f9       	bld	r25, 7
 89c:	08 95       	ret

0000089e <__mulsf3>:
 89e:	0b d0       	rcall	.+22     	; 0x8b6 <__mulsf3x>
 8a0:	78 c0       	rjmp	.+240    	; 0x992 <__fp_round>
 8a2:	69 d0       	rcall	.+210    	; 0x976 <__fp_pscA>
 8a4:	28 f0       	brcs	.+10     	; 0x8b0 <__mulsf3+0x12>
 8a6:	6e d0       	rcall	.+220    	; 0x984 <__fp_pscB>
 8a8:	18 f0       	brcs	.+6      	; 0x8b0 <__mulsf3+0x12>
 8aa:	95 23       	and	r25, r21
 8ac:	09 f0       	breq	.+2      	; 0x8b0 <__mulsf3+0x12>
 8ae:	5a c0       	rjmp	.+180    	; 0x964 <__fp_inf>
 8b0:	5f c0       	rjmp	.+190    	; 0x970 <__fp_nan>
 8b2:	11 24       	eor	r1, r1
 8b4:	ee cf       	rjmp	.-36     	; 0x892 <__fp_szero>

000008b6 <__mulsf3x>:
 8b6:	ca df       	rcall	.-108    	; 0x84c <__fp_split3>
 8b8:	a0 f3       	brcs	.-24     	; 0x8a2 <__mulsf3+0x4>

000008ba <__mulsf3_pse>:
 8ba:	95 9f       	mul	r25, r21
 8bc:	d1 f3       	breq	.-12     	; 0x8b2 <__mulsf3+0x14>
 8be:	95 0f       	add	r25, r21
 8c0:	50 e0       	ldi	r21, 0x00	; 0
 8c2:	55 1f       	adc	r21, r21
 8c4:	62 9f       	mul	r22, r18
 8c6:	f0 01       	movw	r30, r0
 8c8:	72 9f       	mul	r23, r18
 8ca:	bb 27       	eor	r27, r27
 8cc:	f0 0d       	add	r31, r0
 8ce:	b1 1d       	adc	r27, r1
 8d0:	63 9f       	mul	r22, r19
 8d2:	aa 27       	eor	r26, r26
 8d4:	f0 0d       	add	r31, r0
 8d6:	b1 1d       	adc	r27, r1
 8d8:	aa 1f       	adc	r26, r26
 8da:	64 9f       	mul	r22, r20
 8dc:	66 27       	eor	r22, r22
 8de:	b0 0d       	add	r27, r0
 8e0:	a1 1d       	adc	r26, r1
 8e2:	66 1f       	adc	r22, r22
 8e4:	82 9f       	mul	r24, r18
 8e6:	22 27       	eor	r18, r18
 8e8:	b0 0d       	add	r27, r0
 8ea:	a1 1d       	adc	r26, r1
 8ec:	62 1f       	adc	r22, r18
 8ee:	73 9f       	mul	r23, r19
 8f0:	b0 0d       	add	r27, r0
 8f2:	a1 1d       	adc	r26, r1
 8f4:	62 1f       	adc	r22, r18
 8f6:	83 9f       	mul	r24, r19
 8f8:	a0 0d       	add	r26, r0
 8fa:	61 1d       	adc	r22, r1
 8fc:	22 1f       	adc	r18, r18
 8fe:	74 9f       	mul	r23, r20
 900:	33 27       	eor	r19, r19
 902:	a0 0d       	add	r26, r0
 904:	61 1d       	adc	r22, r1
 906:	23 1f       	adc	r18, r19
 908:	84 9f       	mul	r24, r20
 90a:	60 0d       	add	r22, r0
 90c:	21 1d       	adc	r18, r1
 90e:	82 2f       	mov	r24, r18
 910:	76 2f       	mov	r23, r22
 912:	6a 2f       	mov	r22, r26
 914:	11 24       	eor	r1, r1
 916:	9f 57       	subi	r25, 0x7F	; 127
 918:	50 40       	sbci	r21, 0x00	; 0
 91a:	8a f0       	brmi	.+34     	; 0x93e <__mulsf3_pse+0x84>
 91c:	e1 f0       	breq	.+56     	; 0x956 <__mulsf3_pse+0x9c>
 91e:	88 23       	and	r24, r24
 920:	4a f0       	brmi	.+18     	; 0x934 <__mulsf3_pse+0x7a>
 922:	ee 0f       	add	r30, r30
 924:	ff 1f       	adc	r31, r31
 926:	bb 1f       	adc	r27, r27
 928:	66 1f       	adc	r22, r22
 92a:	77 1f       	adc	r23, r23
 92c:	88 1f       	adc	r24, r24
 92e:	91 50       	subi	r25, 0x01	; 1
 930:	50 40       	sbci	r21, 0x00	; 0
 932:	a9 f7       	brne	.-22     	; 0x91e <__mulsf3_pse+0x64>
 934:	9e 3f       	cpi	r25, 0xFE	; 254
 936:	51 05       	cpc	r21, r1
 938:	70 f0       	brcs	.+28     	; 0x956 <__mulsf3_pse+0x9c>
 93a:	14 c0       	rjmp	.+40     	; 0x964 <__fp_inf>
 93c:	aa cf       	rjmp	.-172    	; 0x892 <__fp_szero>
 93e:	5f 3f       	cpi	r21, 0xFF	; 255
 940:	ec f3       	brlt	.-6      	; 0x93c <__mulsf3_pse+0x82>
 942:	98 3e       	cpi	r25, 0xE8	; 232
 944:	dc f3       	brlt	.-10     	; 0x93c <__mulsf3_pse+0x82>
 946:	86 95       	lsr	r24
 948:	77 95       	ror	r23
 94a:	67 95       	ror	r22
 94c:	b7 95       	ror	r27
 94e:	f7 95       	ror	r31
 950:	e7 95       	ror	r30
 952:	9f 5f       	subi	r25, 0xFF	; 255
 954:	c1 f7       	brne	.-16     	; 0x946 <__mulsf3_pse+0x8c>
 956:	fe 2b       	or	r31, r30
 958:	88 0f       	add	r24, r24
 95a:	91 1d       	adc	r25, r1
 95c:	96 95       	lsr	r25
 95e:	87 95       	ror	r24
 960:	97 f9       	bld	r25, 7
 962:	08 95       	ret

00000964 <__fp_inf>:
 964:	97 f9       	bld	r25, 7
 966:	9f 67       	ori	r25, 0x7F	; 127
 968:	80 e8       	ldi	r24, 0x80	; 128
 96a:	70 e0       	ldi	r23, 0x00	; 0
 96c:	60 e0       	ldi	r22, 0x00	; 0
 96e:	08 95       	ret

00000970 <__fp_nan>:
 970:	9f ef       	ldi	r25, 0xFF	; 255
 972:	80 ec       	ldi	r24, 0xC0	; 192
 974:	08 95       	ret

00000976 <__fp_pscA>:
 976:	00 24       	eor	r0, r0
 978:	0a 94       	dec	r0
 97a:	16 16       	cp	r1, r22
 97c:	17 06       	cpc	r1, r23
 97e:	18 06       	cpc	r1, r24
 980:	09 06       	cpc	r0, r25
 982:	08 95       	ret

00000984 <__fp_pscB>:
 984:	00 24       	eor	r0, r0
 986:	0a 94       	dec	r0
 988:	12 16       	cp	r1, r18
 98a:	13 06       	cpc	r1, r19
 98c:	14 06       	cpc	r1, r20
 98e:	05 06       	cpc	r0, r21
 990:	08 95       	ret

00000992 <__fp_round>:
 992:	09 2e       	mov	r0, r25
 994:	03 94       	inc	r0
 996:	00 0c       	add	r0, r0
 998:	11 f4       	brne	.+4      	; 0x99e <__fp_round+0xc>
 99a:	88 23       	and	r24, r24
 99c:	52 f0       	brmi	.+20     	; 0x9b2 <__fp_round+0x20>
 99e:	bb 0f       	add	r27, r27
 9a0:	40 f4       	brcc	.+16     	; 0x9b2 <__fp_round+0x20>
 9a2:	bf 2b       	or	r27, r31
 9a4:	11 f4       	brne	.+4      	; 0x9aa <__fp_round+0x18>
 9a6:	60 ff       	sbrs	r22, 0
 9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <__fp_round+0x20>
 9aa:	6f 5f       	subi	r22, 0xFF	; 255
 9ac:	7f 4f       	sbci	r23, 0xFF	; 255
 9ae:	8f 4f       	sbci	r24, 0xFF	; 255
 9b0:	9f 4f       	sbci	r25, 0xFF	; 255
 9b2:	08 95       	ret

000009b4 <_exit>:
 9b4:	f8 94       	cli

000009b6 <__stop_program>:
 9b6:	ff cf       	rjmp	.-2      	; 0x9b6 <__stop_program>
